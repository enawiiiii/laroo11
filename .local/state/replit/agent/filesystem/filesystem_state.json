{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# LaRosa Fashion Store Management System\n\n## Overview\n\nLaRosa is a full-stack fashion store management application built with React, Express.js, and PostgreSQL. The system manages inventory, sales, orders, and returns for both physical boutique and online store operations. It features a multi-store architecture that completely isolates data and operations between boutique and online stores, ensuring proper segregation of business operations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: React Query for server state, Context API for global state\n- **UI Components**: Radix UI with shadcn/ui component library\n- **Styling**: Tailwind CSS with custom design tokens\n- **Forms**: React Hook Form with Zod validation\n- **Build Tool**: Vite for development and bundling\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **API Design**: RESTful API with store-specific endpoints\n- **Middleware**: JSON parsing, request logging, error handling\n- **Development**: Hot reload with Vite integration\n\n### Data Storage Architecture\n- **Database**: PostgreSQL with Neon serverless connection\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Store Isolation**: All tables include store filtering to separate boutique/online data\n- **Data Models**: Products, inventory, sales, orders, returns, employees with proper relationships\n\n### Authentication and Authorization\n- **Session Management**: Simple employee/store selection stored in localStorage\n- **Store Access Control**: Frontend routing and API endpoints filter by selected store\n- **Employee Tracking**: All transactions record the responsible employee\n\n### Multi-Store Design Pattern\n- **Store Separation**: Complete data isolation between \"boutique\" and \"online\" stores\n- **Filtered Operations**: All CRUD operations include store context\n- **Conditional UI**: Orders section hidden for boutique users (sales-only)\n- **Store-Specific Pricing**: Separate pricing fields for boutique vs online\n\n### Business Logic Architecture\n- **Inventory Management**: Real-time stock tracking with size/color variants\n- **Sales Processing**: Different payment methods and tax handling per store\n- **Order Management**: Online-specific customer information and status tracking\n- **Returns/Exchanges**: Flexible return types with inventory adjustment\n\n## External Dependencies\n\n### Database Services\n- **Neon**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database queries and schema management\n\n### UI and Styling\n- **Radix UI**: Headless component primitives for accessibility\n- **shadcn/ui**: Pre-built component library with Tailwind styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for UI elements\n\n### Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Type safety across frontend and backend\n- **React Query**: Server state management and caching\n- **React Hook Form**: Form handling with validation\n- **Zod**: Runtime type validation and schema parsing\n\n### Deployment Infrastructure\n- **Replit**: Development environment with integrated hosting\n- **Node.js**: Runtime environment for Express server\n- **WebSocket**: Real-time connection support for Neon database\n\n### Utility Libraries\n- **date-fns**: Date formatting and manipulation\n- **clsx**: Conditional CSS class management\n- **nanoid**: Unique ID generation for records\n- **wouter**: Lightweight client-side routing","size_bytes":3734},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertProductSchema, insertSaleSchema, insertOrderSchema, insertReturnSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Employee routes\n  app.get(\"/api/employees\", async (req, res) => {\n    try {\n      const employees = await storage.getEmployees();\n      res.json(employees);\n    } catch (error) {\n      console.error(\"Error fetching employees:\", error);\n      res.status(500).json({ message: \"Failed to fetch employees\" });\n    }\n  });\n\n  app.post(\"/api/employees\", async (req, res) => {\n    try {\n      const employee = await storage.createEmployee(req.body);\n      res.json(employee);\n    } catch (error) {\n      console.error(\"Error creating employee:\", error);\n      res.status(500).json({ message: \"Failed to create employee\" });\n    }\n  });\n\n  // Product routes with store filtering\n  app.get(\"/api/:store/products\", async (req, res) => {\n    try {\n      const { store } = req.params;\n      const { search } = req.query;\n      \n      if (![\"boutique\", \"online\"].includes(store)) {\n        return res.status(400).json({ message: \"Invalid store\" });\n      }\n\n      const products = await storage.getProducts(store, search as string);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const product = await storage.getProduct(id);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validatedData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: error.errors[0]?.message || \"بيانات غير صحيحة\" });\n      }\n      res.status(500).json({ message: \"فشل في إضافة المنتج\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(id, validatedData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteProduct(id);\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Product colors routes\n  app.post(\"/api/products/:id/colors\", async (req, res) => {\n    try {\n      const productId = parseInt(req.params.id);\n      const color = await storage.createProductColor({\n        productId,\n        colorName: req.body.colorName,\n      });\n      res.json(color);\n    } catch (error) {\n      console.error(\"Error creating product color:\", error);\n      res.status(500).json({ message: \"Failed to create product color\" });\n    }\n  });\n\n  // Inventory routes\n  app.get(\"/api/:store/inventory\", async (req, res) => {\n    try {\n      const { store } = req.params;\n      \n      if (![\"boutique\", \"online\"].includes(store)) {\n        return res.status(400).json({ message: \"Invalid store\" });\n      }\n\n      const inventory = await storage.getInventory(store);\n      res.json(inventory);\n    } catch (error) {\n      console.error(\"Error fetching inventory:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.put(\"/api/inventory\", async (req, res) => {\n    try {\n      const inventory = await storage.updateInventory(req.body);\n      res.json(inventory);\n    } catch (error) {\n      console.error(\"Error updating inventory:\", error);\n      res.status(500).json({ message: \"Failed to update inventory\" });\n    }\n  });\n\n  // Sales routes\n  app.get(\"/api/:store/sales\", async (req, res) => {\n    try {\n      const { store } = req.params;\n      const { limit } = req.query;\n      \n      if (![\"boutique\", \"online\"].includes(store)) {\n        return res.status(400).json({ message: \"Invalid store\" });\n      }\n\n      const sales = await storage.getSales(store, limit ? parseInt(limit as string) : undefined);\n      res.json(sales);\n    } catch (error) {\n      console.error(\"Error fetching sales:\", error);\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.post(\"/api/:store/sales\", async (req, res) => {\n    try {\n      const { store } = req.params;\n      \n      if (![\"boutique\", \"online\"].includes(store)) {\n        return res.status(400).json({ message: \"Invalid store\" });\n      }\n\n      // Only boutique can make sales\n      if (store !== \"boutique\") {\n        return res.status(400).json({ message: \"المبيعات متاحة فقط في البوتيك\" });\n      }\n\n      const { productColorId, size, quantity, paymentMethod, unitPrice } = req.body;\n      \n      // Validate payment method for boutique\n      if (![\"cash\", \"card\"].includes(paymentMethod)) {\n        return res.status(400).json({ message: \"البوتيك يقبل الدفع النقدي أو الفيزا فقط\" });\n      }\n\n      // Check inventory availability\n      const available = await storage.checkInventoryAvailability(productColorId, store, size.toString(), quantity);\n      \n      if (!available) {\n        return res.status(400).json({ message: \"المخزون غير كافي\" });\n      }\n\n      // Calculate tax and total for visa payments\n      let taxAmount = \"0\";\n      let totalAmount = (parseFloat(unitPrice) * quantity).toString();\n      \n      if (paymentMethod === \"card\") {\n        const subtotal = parseFloat(unitPrice) * quantity;\n        taxAmount = (subtotal * 0.05).toFixed(2); // 5% tax on visa\n        totalAmount = (subtotal + parseFloat(taxAmount)).toFixed(2);\n      }\n\n      const validatedData = insertSaleSchema.parse({ \n        ...req.body, \n        store,\n        taxAmount,\n        totalAmount \n      });\n      const sale = await storage.createSale(validatedData);\n      res.json(sale);\n    } catch (error) {\n      console.error(\"Error creating sale:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: error.errors[0]?.message || \"بيانات غير صحيحة\" });\n      }\n      res.status(500).json({ message: \"فشل في إنشاء البيع\" });\n    }\n  });\n\n  // Orders routes (Online only)\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const { status, limit } = req.query;\n      const orders = await storage.getOrders(\n        status as string,\n        limit ? parseInt(limit as string) : undefined\n      );\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const { productColorId, size, quantity, paymentMethod, unitPrice } = req.body;\n      \n      // Validate payment method for online orders\n      if (![\"bank_transfer\", \"cash_on_delivery\"].includes(paymentMethod)) {\n        return res.status(400).json({ message: \"الأونلاين يقبل التحويل البنكي أو الدفع عند الاستلام فقط\" });\n      }\n\n      // Check inventory availability for online store\n      const available = await storage.checkInventoryAvailability(productColorId, \"online\", size.toString(), quantity);\n      \n      if (!available) {\n        return res.status(400).json({ message: \"المخزون غير كافي\" });\n      }\n\n      // Calculate total (no tax for online orders)\n      const totalAmount = (parseFloat(unitPrice) * quantity).toFixed(2);\n\n      const validatedData = insertOrderSchema.parse({ \n        ...req.body,\n        totalAmount,\n        store: \"online\"\n      });\n      const order = await storage.createOrder(validatedData);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: error.errors[0]?.message || \"بيانات غير صحيحة\" });\n      }\n      res.status(500).json({ message: \"فشل في إنشاء الطلب\" });\n    }\n  });\n\n  app.put(\"/api/orders/:orderId/status\", async (req, res) => {\n    try {\n      const { orderId } = req.params;\n      const { status } = req.body;\n      \n      const order = await storage.updateOrderStatus(orderId, status);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error updating order status:\", error);\n      res.status(500).json({ message: \"Failed to update order status\" });\n    }\n  });\n\n  // Returns routes\n  app.get(\"/api/:store/returns\", async (req, res) => {\n    try {\n      const { store } = req.params;\n      const { limit } = req.query;\n      \n      if (![\"boutique\", \"online\"].includes(store)) {\n        return res.status(400).json({ message: \"Invalid store\" });\n      }\n\n      const returns = await storage.getReturns(store, limit ? parseInt(limit as string) : undefined);\n      res.json(returns);\n    } catch (error) {\n      console.error(\"Error fetching returns:\", error);\n      res.status(500).json({ message: \"Failed to fetch returns\" });\n    }\n  });\n\n  app.post(\"/api/:store/returns\", async (req, res) => {\n    try {\n      const { store } = req.params;\n      \n      if (![\"boutique\", \"online\"].includes(store)) {\n        return res.status(400).json({ message: \"Invalid store\" });\n      }\n\n      const validatedData = insertReturnSchema.parse({ ...req.body, store });\n      const returnRecord = await storage.createReturn(validatedData);\n      res.json(returnRecord);\n    } catch (error) {\n      console.error(\"Error creating return:\", error);\n      res.status(500).json({ message: \"Failed to create return\" });\n    }\n  });\n\n  // Dashboard metrics\n  app.get(\"/api/:store/dashboard\", async (req, res) => {\n    try {\n      const { store } = req.params;\n      \n      if (![\"boutique\", \"online\"].includes(store)) {\n        return res.status(400).json({ message: \"Invalid store\" });\n      }\n\n      const metrics = await storage.getDashboardMetrics(store);\n      const topProducts = await storage.getTopProducts(store);\n      \n      res.json({ metrics, topProducts });\n    } catch (error) {\n      console.error(\"Error fetching dashboard data:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Export routes\n  app.get(\"/api/:store/export\", async (req, res) => {\n    try {\n      const { store } = req.params;\n      \n      if (![\"boutique\", \"online\"].includes(store)) {\n        return res.status(400).json({ message: \"Invalid store\" });\n      }\n\n      // Get all data for export\n      const products = await storage.getProducts(store);\n      const sales = await storage.getSales(store, 1000);\n      const returns = await storage.getReturns(store, 1000);\n      const inventory = await storage.getInventory(store);\n      \n      let orders = [];\n      if (store === \"online\") {\n        orders = await storage.getOrders(undefined, 1000);\n      }\n\n      const exportData = {\n        products,\n        sales,\n        returns,\n        inventory,\n        orders,\n        exportDate: new Date().toISOString(),\n        store,\n      };\n\n      res.json(exportData);\n    } catch (error) {\n      console.error(\"Error generating export:\", error);\n      res.status(500).json({ message: \"Failed to generate export\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12291},"server/storage.ts":{"content":"import {\n  employees,\n  products,\n  productColors,\n  inventory,\n  sales,\n  orders,\n  returns,\n  type Employee,\n  type InsertEmployee,\n  type Product,\n  type InsertProduct,\n  type ProductColor,\n  type InsertProductColor,\n  type Inventory,\n  type InsertInventory,\n  type Sale,\n  type InsertSale,\n  type Order,\n  type InsertOrder,\n  type Return,\n  type InsertReturn,\n  type ProductWithColors,\n  type SaleWithDetails,\n  type OrderWithDetails,\n  type ReturnWithDetails,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql, like, ilike } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Employee operations\n  getEmployees(): Promise<Employee[]>;\n  getEmployee(id: number): Promise<Employee | undefined>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n\n  // Product operations\n  getProducts(store?: string, searchTerm?: string): Promise<ProductWithColors[]>;\n  getProduct(id: number): Promise<ProductWithColors | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: number): Promise<void>;\n\n  // Product color operations\n  createProductColor(color: InsertProductColor): Promise<ProductColor>;\n  getProductColors(productId: number): Promise<ProductColor[]>;\n\n  // Inventory operations\n  getInventory(store: string, productColorId?: number): Promise<Inventory[]>;\n  updateInventory(inventory: InsertInventory): Promise<Inventory>;\n  updateInventoryQuantity(productColorId: number, store: string, size: string, quantityChange: number): Promise<void>;\n  checkInventoryAvailability(productColorId: number, store: string, size: string, quantity: number): Promise<boolean>;\n\n  // Sales operations\n  getSales(store: string, limit?: number): Promise<SaleWithDetails[]>;\n  createSale(sale: InsertSale): Promise<Sale>;\n  getSale(saleId: string): Promise<SaleWithDetails | undefined>;\n\n  // Order operations\n  getOrders(status?: string, limit?: number): Promise<OrderWithDetails[]>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrderStatus(orderId: string, status: string): Promise<Order>;\n  getOrder(orderId: string): Promise<OrderWithDetails | undefined>;\n\n  // Return operations\n  getReturns(store: string, limit?: number): Promise<ReturnWithDetails[]>;\n  createReturn(returnData: InsertReturn): Promise<Return>;\n\n  // Analytics operations\n  getDashboardMetrics(store: string): Promise<{\n    totalProducts: number;\n    todaySales: string;\n    pendingOrders: number;\n    lowStockItems: number;\n  }>;\n  getTopProducts(store: string, limit?: number): Promise<any[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getEmployees(): Promise<Employee[]> {\n    return await db.select().from(employees);\n  }\n\n  async getEmployee(id: number): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.id, id));\n    return employee;\n  }\n\n  async createEmployee(employee: InsertEmployee): Promise<Employee> {\n    const [newEmployee] = await db.insert(employees).values(employee).returning();\n    return newEmployee;\n  }\n\n  async getProducts(store?: string, searchTerm?: string): Promise<ProductWithColors[]> {\n    let query = db\n      .select()\n      .from(products)\n      .leftJoin(productColors, eq(products.id, productColors.productId))\n      .leftJoin(inventory, eq(productColors.id, inventory.productColorId));\n\n    if (store) {\n      query = query.where(eq(inventory.store, store as any));\n    }\n\n    if (searchTerm) {\n      query = query.where(\n        sql`${products.productCode} ILIKE ${`%${searchTerm}%`} OR \n            ${products.modelNumber} ILIKE ${`%${searchTerm}%`} OR \n            ${products.brand} ILIKE ${`%${searchTerm}%`}`\n      );\n    }\n\n    const results = await query;\n\n    // Group results by product\n    const productMap = new Map<number, ProductWithColors>();\n    \n    for (const row of results) {\n      const product = row.products;\n      if (!productMap.has(product.id)) {\n        productMap.set(product.id, {\n          ...product,\n          colors: [],\n        });\n      }\n\n      const productWithColors = productMap.get(product.id)!;\n      \n      if (row.product_colors) {\n        const existingColor = productWithColors.colors.find(c => c.id === row.product_colors!.id);\n        if (!existingColor) {\n          productWithColors.colors.push({\n            ...row.product_colors,\n            inventory: row.inventory ? [row.inventory] : [],\n          });\n        } else if (row.inventory) {\n          existingColor.inventory.push(row.inventory);\n        }\n      }\n    }\n\n    return Array.from(productMap.values());\n  }\n\n  async getProduct(id: number): Promise<ProductWithColors | undefined> {\n    const results = await db\n      .select()\n      .from(products)\n      .leftJoin(productColors, eq(products.id, productColors.productId))\n      .leftJoin(inventory, eq(productColors.id, inventory.productColorId))\n      .where(eq(products.id, id));\n\n    if (results.length === 0) return undefined;\n\n    const product = results[0].products;\n    const colors = new Map<number, ProductColor & { inventory: Inventory[] }>();\n\n    for (const row of results) {\n      if (row.product_colors) {\n        if (!colors.has(row.product_colors.id)) {\n          colors.set(row.product_colors.id, {\n            ...row.product_colors,\n            inventory: [],\n          });\n        }\n        if (row.inventory) {\n          colors.get(row.product_colors.id)!.inventory.push(row.inventory);\n        }\n      }\n    }\n\n    return {\n      ...product,\n      colors: Array.from(colors.values()),\n    };\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set({ ...product, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: number): Promise<void> {\n    await db.delete(products).where(eq(products.id, id));\n  }\n\n  async createProductColor(color: InsertProductColor): Promise<ProductColor> {\n    const [newColor] = await db.insert(productColors).values(color).returning();\n    return newColor;\n  }\n\n  async getProductColors(productId: number): Promise<ProductColor[]> {\n    return await db.select().from(productColors).where(eq(productColors.productId, productId));\n  }\n\n  async getInventory(store: string, productColorId?: number): Promise<Inventory[]> {\n    let query = db.select().from(inventory).where(eq(inventory.store, store as any));\n    \n    if (productColorId) {\n      query = query.where(and(eq(inventory.store, store as any), eq(inventory.productColorId, productColorId)));\n    }\n    \n    return await query;\n  }\n\n  async updateInventory(inventoryData: InsertInventory): Promise<Inventory> {\n    // Try to find existing inventory record\n    const [existing] = await db\n      .select()\n      .from(inventory)\n      .where(\n        and(\n          eq(inventory.productColorId, inventoryData.productColorId),\n          eq(inventory.store, inventoryData.store),\n          eq(inventory.size, inventoryData.size)\n        )\n      );\n\n    if (existing) {\n      // Update existing record\n      const [updated] = await db\n        .update(inventory)\n        .set({ ...inventoryData, updatedAt: new Date() })\n        .where(eq(inventory.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new record\n      const [newInventory] = await db.insert(inventory).values(inventoryData).returning();\n      return newInventory;\n    }\n  }\n\n  async updateInventoryQuantity(productColorId: number, store: string, size: string, quantityChange: number): Promise<void> {\n    const [existing] = await db\n      .select()\n      .from(inventory)\n      .where(\n        and(\n          eq(inventory.productColorId, productColorId),\n          eq(inventory.store, store as any),\n          eq(inventory.size, size)\n        )\n      );\n\n    if (existing) {\n      await db\n        .update(inventory)\n        .set({ \n          quantity: Math.max(0, existing.quantity + quantityChange),\n          updatedAt: new Date()\n        })\n        .where(eq(inventory.id, existing.id));\n    }\n  }\n\n  async checkInventoryAvailability(productColorId: number, store: string, size: string, quantity: number): Promise<boolean> {\n    const [existing] = await db\n      .select()\n      .from(inventory)\n      .where(\n        and(\n          eq(inventory.productColorId, productColorId),\n          eq(inventory.store, store as any),\n          eq(inventory.size, size)\n        )\n      );\n\n    return existing ? existing.quantity >= quantity : false;\n  }\n\n  async getSales(store: string, limit: number = 50): Promise<SaleWithDetails[]> {\n    return await db\n      .select()\n      .from(sales)\n      .leftJoin(employees, eq(sales.employeeId, employees.id))\n      .leftJoin(productColors, eq(sales.productColorId, productColors.id))\n      .leftJoin(products, eq(productColors.productId, products.id))\n      .where(eq(sales.store, store as any))\n      .orderBy(desc(sales.createdAt))\n      .limit(limit) as SaleWithDetails[];\n  }\n\n  async createSale(sale: InsertSale): Promise<Sale> {\n    const [newSale] = await db.insert(sales).values(sale).returning();\n    \n    // Update inventory\n    await this.updateInventoryQuantity(\n      sale.productColorId,\n      sale.store,\n      sale.size.toString(),\n      -sale.quantity\n    );\n    \n    return newSale;\n  }\n\n  async getSale(saleId: string): Promise<SaleWithDetails | undefined> {\n    const [result] = await db\n      .select()\n      .from(sales)\n      .leftJoin(employees, eq(sales.employeeId, employees.id))\n      .leftJoin(productColors, eq(sales.productColorId, productColors.id))\n      .leftJoin(products, eq(productColors.productId, products.id))\n      .where(eq(sales.saleId, saleId)) as SaleWithDetails[];\n\n    return result;\n  }\n\n  async getOrders(status?: string, limit: number = 50): Promise<OrderWithDetails[]> {\n    let query = db\n      .select()\n      .from(orders)\n      .leftJoin(employees, eq(orders.employeeId, employees.id))\n      .leftJoin(productColors, eq(orders.productColorId, productColors.id))\n      .leftJoin(products, eq(productColors.productId, products.id))\n      .orderBy(desc(orders.createdAt))\n      .limit(limit);\n\n    if (status) {\n      query = query.where(eq(orders.status, status as any));\n    }\n\n    return await query as OrderWithDetails[];\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await db.insert(orders).values(order).returning();\n    \n    // Update inventory for online store\n    await this.updateInventoryQuantity(\n      order.productColorId,\n      \"online\",\n      order.size.toString(),\n      -order.quantity\n    );\n    \n    return newOrder;\n  }\n\n  async updateOrderStatus(orderId: string, status: string): Promise<Order> {\n    const [updatedOrder] = await db\n      .update(orders)\n      .set({ status: status as any, updatedAt: new Date() })\n      .where(eq(orders.orderId, orderId))\n      .returning();\n    return updatedOrder;\n  }\n\n  async getOrder(orderId: string): Promise<OrderWithDetails | undefined> {\n    const [result] = await db\n      .select()\n      .from(orders)\n      .leftJoin(employees, eq(orders.employeeId, employees.id))\n      .leftJoin(productColors, eq(orders.productColorId, productColors.id))\n      .leftJoin(products, eq(productColors.productId, products.id))\n      .where(eq(orders.orderId, orderId)) as OrderWithDetails[];\n\n    return result;\n  }\n\n  async getReturns(store: string, limit: number = 50): Promise<ReturnWithDetails[]> {\n    return await db\n      .select()\n      .from(returns)\n      .leftJoin(employees, eq(returns.employeeId, employees.id))\n      .leftJoin(productColors, eq(returns.originalProductColorId, productColors.id))\n      .leftJoin(products, eq(productColors.productId, products.id))\n      .where(eq(returns.store, store as any))\n      .orderBy(desc(returns.createdAt))\n      .limit(limit) as ReturnWithDetails[];\n  }\n\n  async createReturn(returnData: InsertReturn): Promise<Return> {\n    const [newReturn] = await db.insert(returns).values(returnData).returning();\n    \n    // Update inventory - add back original quantity\n    await this.updateInventoryQuantity(\n      returnData.originalProductColorId,\n      returnData.store,\n      returnData.originalSize.toString(),\n      returnData.originalQuantity\n    );\n    \n    // If it's an exchange, reduce inventory for new product\n    if (returnData.newProductColorId && returnData.newSize && returnData.newQuantity) {\n      await this.updateInventoryQuantity(\n        returnData.newProductColorId,\n        returnData.store,\n        returnData.newSize.toString(),\n        -returnData.newQuantity\n      );\n    }\n    \n    return newReturn;\n  }\n\n  async getDashboardMetrics(store: string): Promise<{\n    totalProducts: number;\n    todaySales: string;\n    pendingOrders: number;\n    lowStockItems: number;\n  }> {\n    // Get total products with inventory in this store\n    const totalProductsResult = await db\n      .select({ count: sql<number>`count(distinct ${products.id})` })\n      .from(products)\n      .leftJoin(productColors, eq(products.id, productColors.productId))\n      .leftJoin(inventory, eq(productColors.id, inventory.productColorId))\n      .where(eq(inventory.store, store as any));\n\n    // Get today's sales\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const todaySalesResult = await db\n      .select({ total: sql<string>`COALESCE(SUM(${sales.totalAmount}), 0)` })\n      .from(sales)\n      .where(\n        and(\n          eq(sales.store, store as any),\n          sql`${sales.createdAt} >= ${today}`\n        )\n      );\n\n    // Get pending orders (only for online store)\n    let pendingOrders = 0;\n    if (store === \"online\") {\n      const pendingOrdersResult = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(orders)\n        .where(eq(orders.status, \"pending\"));\n      pendingOrders = pendingOrdersResult[0]?.count || 0;\n    }\n\n    // Get low stock items (quantity < 5)\n    const lowStockResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(inventory)\n      .where(\n        and(\n          eq(inventory.store, store as any),\n          sql`${inventory.quantity} < 5`\n        )\n      );\n\n    return {\n      totalProducts: totalProductsResult[0]?.count || 0,\n      todaySales: todaySalesResult[0]?.total || \"0\",\n      pendingOrders,\n      lowStockItems: lowStockResult[0]?.count || 0,\n    };\n  }\n\n  async getTopProducts(store: string, limit: number = 5): Promise<any[]> {\n    const results = await db\n      .select({\n        productId: products.id,\n        productName: sql<string>`CONCAT(${products.brand}, ' ', ${products.modelNumber})`,\n        totalSold: sql<number>`SUM(${sales.quantity})`,\n        totalRevenue: sql<string>`SUM(${sales.totalAmount})`,\n        imageUrl: products.imageUrl,\n      })\n      .from(sales)\n      .leftJoin(productColors, eq(sales.productColorId, productColors.id))\n      .leftJoin(products, eq(productColors.productId, products.id))\n      .where(eq(sales.store, store as any))\n      .groupBy(products.id, products.brand, products.modelNumber, products.imageUrl)\n      .orderBy(sql`SUM(${sales.quantity}) DESC`)\n      .limit(limit);\n\n    return results;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":15524},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport {\n  pgTable,\n  text,\n  varchar,\n  integer,\n  decimal,\n  timestamp,\n  pgEnum,\n  jsonb,\n  boolean,\n  serial,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const storeEnum = pgEnum(\"store\", [\"boutique\", \"online\"]);\nexport const paymentMethodEnum = pgEnum(\"payment_method\", [\"cash\", \"card\", \"bank_transfer\", \"cash_on_delivery\"]);\nexport const orderStatusEnum = pgEnum(\"order_status\", [\"pending\", \"in_delivery\", \"delivered\", \"cancelled\"]);\nexport const returnTypeEnum = pgEnum(\"return_type\", [\"refund\", \"exchange_color\", \"exchange_size\", \"exchange_model\"]);\n\n// Employees table\nexport const employees = pgTable(\"employees\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  modelNumber: varchar(\"model_number\", { length: 50 }).notNull().unique(),\n  brand: varchar(\"brand\", { length: 100 }).notNull(),\n  productType: varchar(\"product_type\", { length: 50 }).notNull(),\n  storePriceAED: decimal(\"store_price_aed\", { precision: 10, scale: 2 }).notNull(),\n  onlinePriceAED: decimal(\"online_price_aed\", { precision: 10, scale: 2 }).notNull(),\n  specifications: text(\"specifications\"),\n  imageUrl: varchar(\"image_url\", { length: 500 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Product colors table\nexport const productColors = pgTable(\"product_colors\", {\n  id: serial(\"id\").primaryKey(),\n  productId: integer(\"product_id\").references(() => products.id, { onDelete: \"cascade\" }).notNull(),\n  colorName: varchar(\"color_name\", { length: 50 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Inventory table (sizes and quantities per color per store)\nexport const inventory = pgTable(\"inventory\", {\n  id: serial(\"id\").primaryKey(),\n  productColorId: integer(\"product_color_id\").references(() => productColors.id, { onDelete: \"cascade\" }).notNull(),\n  store: storeEnum(\"store\").notNull(),\n  size: decimal(\"size\", { precision: 4, scale: 1 }).notNull(), // Valid sizes: 38, 40, 42, 44, 46, 48, 50, 52\n  quantity: integer(\"quantity\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Sales table (Boutique sales)\nexport const sales = pgTable(\"sales\", {\n  id: serial(\"id\").primaryKey(),\n  saleId: varchar(\"sale_id\", { length: 50 }).notNull().unique(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  store: storeEnum(\"store\").notNull(),\n  productColorId: integer(\"product_color_id\").references(() => productColors.id).notNull(),\n  size: decimal(\"size\", { precision: 4, scale: 1 }).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: paymentMethodEnum(\"payment_method\").notNull(),\n  taxAmount: decimal(\"tax_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Orders table (Online orders)\nexport const orders = pgTable(\"orders\", {\n  id: serial(\"id\").primaryKey(),\n  orderId: varchar(\"order_id\", { length: 50 }).notNull().unique(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  customerName: varchar(\"customer_name\", { length: 100 }).notNull(),\n  customerPhone: varchar(\"customer_phone\", { length: 20 }).notNull(),\n  customerEmirate: varchar(\"customer_emirate\", { length: 50 }).notNull(),\n  customerAddress: text(\"customer_address\").notNull(),\n  trackingNumber: varchar(\"tracking_number\", { length: 100 }),\n  notes: text(\"notes\"),\n  productColorId: integer(\"product_color_id\").references(() => productColors.id).notNull(),\n  size: decimal(\"size\", { precision: 4, scale: 1 }).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: paymentMethodEnum(\"payment_method\").notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  status: orderStatusEnum(\"status\").notNull().default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Returns table\nexport const returns = pgTable(\"returns\", {\n  id: serial(\"id\").primaryKey(),\n  returnId: varchar(\"return_id\", { length: 50 }).notNull().unique(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  store: storeEnum(\"store\").notNull(),\n  originalSaleId: varchar(\"original_sale_id\", { length: 50 }),\n  originalOrderId: varchar(\"original_order_id\", { length: 50 }),\n  returnType: returnTypeEnum(\"return_type\").notNull(),\n  originalProductColorId: integer(\"original_product_color_id\").references(() => productColors.id).notNull(),\n  originalSize: decimal(\"original_size\", { precision: 4, scale: 1 }).notNull(),\n  originalQuantity: integer(\"original_quantity\").notNull(),\n  newProductColorId: integer(\"new_product_color_id\").references(() => productColors.id),\n  newSize: decimal(\"new_size\", { precision: 4, scale: 1 }),\n  newQuantity: integer(\"new_quantity\"),\n  refundAmount: decimal(\"refund_amount\", { precision: 10, scale: 2 }),\n  priceDifference: decimal(\"price_difference\", { precision: 10, scale: 2 }),\n  reason: text(\"reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const productsRelations = relations(products, ({ many }) => ({\n  colors: many(productColors),\n}));\n\nexport const productColorsRelations = relations(productColors, ({ one, many }) => ({\n  product: one(products, {\n    fields: [productColors.productId],\n    references: [products.id],\n  }),\n  inventory: many(inventory),\n  sales: many(sales),\n  orders: many(orders),\n  returns: many(returns),\n}));\n\nexport const inventoryRelations = relations(inventory, ({ one }) => ({\n  productColor: one(productColors, {\n    fields: [inventory.productColorId],\n    references: [productColors.id],\n  }),\n}));\n\nexport const salesRelations = relations(sales, ({ one }) => ({\n  employee: one(employees, {\n    fields: [sales.employeeId],\n    references: [employees.id],\n  }),\n  productColor: one(productColors, {\n    fields: [sales.productColorId],\n    references: [productColors.id],\n  }),\n}));\n\nexport const ordersRelations = relations(orders, ({ one }) => ({\n  employee: one(employees, {\n    fields: [orders.employeeId],\n    references: [employees.id],\n  }),\n  productColor: one(productColors, {\n    fields: [orders.productColorId],\n    references: [productColors.id],\n  }),\n}));\n\nexport const returnsRelations = relations(returns, ({ one }) => ({\n  employee: one(employees, {\n    fields: [returns.employeeId],\n    references: [employees.id],\n  }),\n  originalProductColor: one(productColors, {\n    fields: [returns.originalProductColorId],\n    references: [productColors.id],\n  }),\n  newProductColor: one(productColors, {\n    fields: [returns.newProductColorId],\n    references: [productColors.id],\n  }),\n}));\n\nexport const employeesRelations = relations(employees, ({ many }) => ({\n  sales: many(sales),\n  orders: many(orders),\n  returns: many(returns),\n}));\n\n// Insert schemas\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  // Add custom validation for sizes\n  modelNumber: z.string().min(1, \"رقم الموديل مطلوب\"),\n  brand: z.string().min(1, \"اسم الشركة مطلوب\"),\n  productType: z.string().min(1, \"نوع القطعة مطلوب\"),\n  storePriceAED: z.string().min(1, \"سعر البوتيك مطلوب\"),\n  onlinePriceAED: z.string().min(1, \"السعر الأونلاين مطلوب\"),\n});\n\n// Valid sizes constraint\nexport const VALID_SIZES = [38, 40, 42, 44, 46, 48, 50, 52] as const;\nexport const sizeSchema = z.number().refine(\n  (size) => VALID_SIZES.includes(size as typeof VALID_SIZES[number]),\n  { message: \"المقاس يجب أن يكون من المقاسات المتاحة: 38, 40, 42, 44, 46, 48, 50, 52\" }\n);\n\n// Payment method validation schemas\nexport const boutiquePaymentSchema = z.object({\n  paymentMethod: z.enum([\"cash\", \"card\"], { message: \"البوتيك يقبل الدفع النقدي أو الفيزا فقط\" }),\n  store: z.literal(\"boutique\"),\n  taxAmount: z.string().optional(),\n  totalAmount: z.string(),\n});\n\nexport const onlinePaymentSchema = z.object({\n  paymentMethod: z.enum([\"bank_transfer\", \"cash_on_delivery\"], { message: \"الأونلاين يقبل التحويل البنكي أو الدفع عند الاستلام فقط\" }),\n  totalAmount: z.string(),\n});\n\nexport const insertProductColorSchema = createInsertSchema(productColors).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInventorySchema = createInsertSchema(inventory).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  size: sizeSchema.transform(String), // Convert to string for database storage\n});\n\nexport const insertSaleSchema = createInsertSchema(sales).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  size: sizeSchema.transform(String),\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  size: sizeSchema.transform(String),\n  customerName: z.string().min(1, \"اسم الزبون مطلوب\"),\n  customerPhone: z.string().min(1, \"رقم الهاتف مطلوب\"),\n  customerEmirate: z.string().min(1, \"الإمارة مطلوبة\"),\n  customerAddress: z.string().min(1, \"العنوان مطلوب\"),\n});\n\nexport const insertReturnSchema = createInsertSchema(returns).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  originalSize: sizeSchema.transform(String),\n  newSize: z.optional(sizeSchema.transform(String)),\n});\n\n// Types\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type ProductColor = typeof productColors.$inferSelect;\nexport type InsertProductColor = z.infer<typeof insertProductColorSchema>;\n\nexport type Inventory = typeof inventory.$inferSelect;\nexport type InsertInventory = z.infer<typeof insertInventorySchema>;\n\nexport type Sale = typeof sales.$inferSelect;\nexport type InsertSale = z.infer<typeof insertSaleSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type Return = typeof returns.$inferSelect;\nexport type InsertReturn = z.infer<typeof insertReturnSchema>;\n\n// Additional types for complex operations\nexport type ProductWithColors = Product & {\n  colors: (ProductColor & {\n    inventory: Inventory[];\n  })[];\n};\n\nexport type SaleWithDetails = Sale & {\n  employee: Employee;\n  productColor: ProductColor & {\n    product: Product;\n  };\n};\n\nexport type OrderWithDetails = Order & {\n  employee: Employee;\n  productColor: ProductColor & {\n    product: Product;\n  };\n};\n\nexport type ReturnWithDetails = Return & {\n  employee: Employee;\n  originalProductColor: ProductColor & {\n    product: Product;\n  };\n  newProductColor?: ProductColor & {\n    product: Product;\n  };\n};\n","size_bytes":11554},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { StoreProvider } from \"@/hooks/use-store\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Inventory from \"@/pages/inventory\";\nimport Sales from \"@/pages/sales\";\nimport Orders from \"@/pages/orders\";\nimport Returns from \"@/pages/returns\";\nimport Reports from \"@/pages/reports\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Login} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/inventory\" component={Inventory} />\n      <Route path=\"/sales\" component={Sales} />\n      <Route path=\"/orders\" component={Orders} />\n      <Route path=\"/returns\" component={Returns} />\n      <Route path=\"/reports\" component={Reports} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <StoreProvider>\n          <Toaster />\n          <Router />\n        </StoreProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1356},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@200..1000&family=Amiri:ital,wght@0,400;0,700;1,400;1,700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(346, 87%, 48%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 47.4%, 11.2%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(142.1, 76.2%, 36.3%);\n  --accent-foreground: hsl(355.7, 100%, 97.3%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(346, 87%, 48%);\n  --radius: 0.75rem;\n  --font-sans: 'Cairo', Inter, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(346, 87%, 48%);\n  --primary-foreground: hsl(222.2, 47.4%, 11.2%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(142.1, 76.2%, 36.3%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(346, 87%, 48%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* RTL Support */\nhtml[dir=\"rtl\"] {\n  font-family: 'Cairo', 'Amiri', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n}\n\n/* Custom Black & Gold Theme for Login */\n.login-theme {\n  --background: 0 0% 8%; /* Deep black */\n  --foreground: 45 100% 60%; /* Gold */\n  --card: 0 0% 12%; /* Dark gray */\n  --card-foreground: 45 100% 70%; /* Light gold */\n  --popover: 0 0% 12%;\n  --popover-foreground: 45 100% 70%;\n  --primary: 45 100% 50%; /* Pure gold */\n  --primary-foreground: 0 0% 8%;\n  --secondary: 0 0% 18%;\n  --secondary-foreground: 45 100% 85%;\n  --muted: 0 0% 18%;\n  --muted-foreground: 45 30% 70%;\n  --accent: 45 100% 60%;\n  --accent-foreground: 0 0% 8%;\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 0 85.7% 97.3%;\n  --border: 0 0% 20%;\n  --input: 0 0% 20%;\n  --ring: 45 100% 50%;\n  --radius: 0.5rem;\n}\n\n.login-theme .gradient-bg {\n  background: linear-gradient(135deg, #000000 0%, #1a1a1a 50%, #2d2d2d 100%);\n}\n\n.login-theme .gold-gradient {\n  background: linear-gradient(135deg, #FFD700 0%, #FFA500 50%, #FF8C00 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.login-theme .card-gold-border {\n  border: 2px solid hsl(45, 100%, 50%);\n  box-shadow: 0 4px 20px rgba(255, 215, 0, 0.1);\n}\n\n.login-container {\n  background: linear-gradient(135deg, var(--primary) 0%, hsl(346, 87%, 58%) 100%);\n}\n\n.sidebar-active {\n  background-color: var(--accent);\n  color: var(--accent-foreground);\n}\n\n/* Product Cards */\n.product-card {\n  @apply bg-card border border-border rounded-lg p-6 hover:shadow-lg transition-shadow;\n}\n\n.product-card-image {\n  @apply w-full h-48 object-cover rounded-md mb-4;\n}\n\n.product-card-title {\n  @apply text-lg font-semibold text-foreground mb-2;\n}\n\n.product-card-info {\n  @apply text-sm text-muted-foreground mb-1;\n}\n\n.product-card-price {\n  @apply text-xl font-bold text-primary mb-4;\n}\n\n.product-card-stock {\n  @apply text-sm text-muted-foreground mb-4;\n}\n\n.product-card-actions {\n  @apply flex flex-wrap gap-2;\n}\n\n/* Products Grid */\n.products-grid {\n  @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6;\n}\n\n/* RTL specific adjustments */\nhtml[dir=\"rtl\"] .flex {\n  direction: ltr;\n}\n\nhtml[dir=\"rtl\"] .flex > * {\n  direction: rtl;\n}\n\n/* Fix for shadcn components in RTL */\nhtml[dir=\"rtl\"] .data-[side=right]:not([data-state=open]) {\n  left: auto;\n  right: 100%;\n}\n\nhtml[dir=\"rtl\"] .data-[side=left]:not([data-state=open]) {\n  left: 100%;\n  right: auto;\n}\n\n/* Numbers should remain LTR in RTL text */\n.number-ltr {\n  direction: ltr;\n  display: inline-block;\n  unicode-bidi: embed;\n}\n\n/* Status badges */\n.status-badge {\n  @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n}\n\n.status-pending {\n  @apply bg-yellow-100 text-yellow-800;\n}\n\n.status-completed {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-cancelled {\n  @apply bg-red-100 text-red-800;\n}\n\n.status-in-delivery {\n  @apply bg-blue-100 text-blue-800;\n}\n","size_bytes":5099},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-i18n.ts":{"content":"import { useState, useEffect } from \"react\";\n\ninterface I18nContextType {\n  language: \"en\" | \"ar\";\n  direction: \"ltr\" | \"rtl\";\n  setLanguage: (lang: \"en\" | \"ar\") => void;\n  t: (key: string) => string;\n}\n\nconst translations = {\n  en: {\n    // Navigation\n    \"nav.dashboard\": \"Dashboard\",\n    \"nav.inventory\": \"Inventory Management\", \n    \"nav.sales\": \"Sales\",\n    \"nav.orders\": \"Orders\",\n    \"nav.returns\": \"Returns & Exchanges\",\n    \"nav.reports\": \"Reports\",\n    \n    // Common\n    \"common.employee\": \"Employee\",\n    \"common.store\": \"Store\",\n    \"common.boutique\": \"Boutique\",\n    \"common.online\": \"Online\",\n    \"common.search\": \"Search\",\n    \"common.filter\": \"Filter\",\n    \"common.add\": \"Add\",\n    \"common.edit\": \"Edit\",\n    \"common.delete\": \"Delete\",\n    \"common.save\": \"Save\",\n    \"common.cancel\": \"Cancel\",\n    \"common.submit\": \"Submit\",\n    \"common.loading\": \"Loading...\",\n    \n    // Products\n    \"product.code\": \"Product Code\",\n    \"product.model\": \"Model Number\",\n    \"product.brand\": \"Brand\",\n    \"product.type\": \"Product Type\",\n    \"product.price.store\": \"Store Price\",\n    \"product.price.online\": \"Online Price\",\n    \"product.specifications\": \"Specifications\",\n    \"product.image\": \"Product Image\",\n    \"product.color\": \"Color\",\n    \"product.size\": \"Size\",\n    \"product.quantity\": \"Quantity\",\n    \"product.stock\": \"Stock\",\n    \n    // Sales\n    \"sales.payment.method\": \"Payment Method\",\n    \"sales.payment.cash\": \"Cash (No Tax)\",\n    \"sales.payment.card\": \"Card (5% Tax)\",\n    \"sales.total\": \"Total Amount\",\n    \"sales.tax\": \"Tax Amount\",\n    \"sales.complete\": \"Complete Sale\",\n    \n    // Orders\n    \"order.customer.name\": \"Customer Name\",\n    \"order.customer.phone\": \"Phone Number\",\n    \"order.customer.emirate\": \"Emirate\",\n    \"order.customer.address\": \"Address\",\n    \"order.tracking\": \"Tracking Number\",\n    \"order.status\": \"Order Status\",\n    \"order.notes\": \"Notes\",\n    \"order.payment.cod\": \"Cash on Delivery\",\n    \"order.payment.transfer\": \"Bank Transfer\",\n    \n    // Returns\n    \"return.type\": \"Return Type\",\n    \"return.refund\": \"Refund (No Replacement)\",\n    \"return.exchange.color\": \"Exchange - Color to Color\",\n    \"return.exchange.size\": \"Exchange - Size to Size\", \n    \"return.exchange.model\": \"Exchange - Model to Model\",\n    \"return.original\": \"Original Product\",\n    \"return.new\": \"New Product\",\n    \"return.reason\": \"Reason\",\n    \n    // Status\n    \"status.pending\": \"Pending\",\n    \"status.in_delivery\": \"In Delivery\",\n    \"status.delivered\": \"Delivered\",\n    \"status.cancelled\": \"Cancelled\",\n    \"status.in_stock\": \"In Stock\",\n    \"status.low_stock\": \"Low Stock\",\n    \"status.out_of_stock\": \"Out of Stock\"\n  },\n  ar: {\n    // Navigation\n    \"nav.dashboard\": \"لوحة التحكم\",\n    \"nav.inventory\": \"إدارة المخزون\",\n    \"nav.sales\": \"المبيعات\",\n    \"nav.orders\": \"الطلبات\",\n    \"nav.returns\": \"المرتجعات والاستبدال\",\n    \"nav.reports\": \"التقارير\",\n    \n    // Common\n    \"common.employee\": \"الموظف\",\n    \"common.store\": \"المتجر\",\n    \"common.boutique\": \"البوتيك\",\n    \"common.online\": \"أونلاين\",\n    \"common.search\": \"بحث\",\n    \"common.filter\": \"تصفية\",\n    \"common.add\": \"إضافة\",\n    \"common.edit\": \"تعديل\",\n    \"common.delete\": \"حذف\",\n    \"common.save\": \"حفظ\",\n    \"common.cancel\": \"إلغاء\",\n    \"common.submit\": \"إرسال\",\n    \"common.loading\": \"جاري التحميل...\",\n    \n    // Products\n    \"product.code\": \"كود المنتج\",\n    \"product.model\": \"رقم الموديل\",\n    \"product.brand\": \"العلامة التجارية\",\n    \"product.type\": \"نوع المنتج\",\n    \"product.price.store\": \"سعر المتجر\",\n    \"product.price.online\": \"السعر الإلكتروني\",\n    \"product.specifications\": \"المواصفات\",\n    \"product.image\": \"صورة المنتج\",\n    \"product.color\": \"اللون\",\n    \"product.size\": \"المقاس\",\n    \"product.quantity\": \"الكمية\",\n    \"product.stock\": \"المخزون\",\n    \n    // Sales\n    \"sales.payment.method\": \"طريقة الدفع\",\n    \"sales.payment.cash\": \"نقدي (بدون ضريبة)\",\n    \"sales.payment.card\": \"بطاقة (ضريبة 5%)\",\n    \"sales.total\": \"المبلغ الإجمالي\",\n    \"sales.tax\": \"مبلغ الضريبة\",\n    \"sales.complete\": \"إتمام البيع\",\n    \n    // Orders\n    \"order.customer.name\": \"اسم العميل\",\n    \"order.customer.phone\": \"رقم الهاتف\",\n    \"order.customer.emirate\": \"الإمارة\",\n    \"order.customer.address\": \"العنوان\",\n    \"order.tracking\": \"رقم التتبع\",\n    \"order.status\": \"حالة الطلب\",\n    \"order.notes\": \"ملاحظات\",\n    \"order.payment.cod\": \"الدفع عند الاستلام\",\n    \"order.payment.transfer\": \"تحويل بنكي\",\n    \n    // Returns\n    \"return.type\": \"نوع الإرجاع\",\n    \"return.refund\": \"استرداد (بدون استبدال)\",\n    \"return.exchange.color\": \"استبدال - لون بلون\",\n    \"return.exchange.size\": \"استبدال - مقاس بمقاس\",\n    \"return.exchange.model\": \"استبدال - موديل بموديل\",\n    \"return.original\": \"المنتج الأصلي\",\n    \"return.new\": \"المنتج الجديد\",\n    \"return.reason\": \"السبب\",\n    \n    // Status\n    \"status.pending\": \"في الانتظار\",\n    \"status.in_delivery\": \"في التوصيل\",\n    \"status.delivered\": \"تم التوصيل\",\n    \"status.cancelled\": \"ملغى\",\n    \"status.in_stock\": \"متوفر\",\n    \"status.low_stock\": \"مخزون منخفض\",\n    \"status.out_of_stock\": \"غير متوفر\"\n  }\n};\n\nexport function useI18n(): I18nContextType {\n  const [language, setLanguageState] = useState<\"en\" | \"ar\">(\"en\");\n  const [direction, setDirection] = useState<\"ltr\" | \"rtl\">(\"ltr\");\n\n  useEffect(() => {\n    // Load saved language from localStorage\n    const savedLanguage = localStorage.getItem(\"larosa_language\") as \"en\" | \"ar\";\n    if (savedLanguage) {\n      setLanguageState(savedLanguage);\n      setDirection(savedLanguage === \"ar\" ? \"rtl\" : \"ltr\");\n    }\n  }, []);\n\n  const setLanguage = (lang: \"en\" | \"ar\") => {\n    setLanguageState(lang);\n    setDirection(lang === \"ar\" ? \"rtl\" : \"ltr\");\n    localStorage.setItem(\"larosa_language\", lang);\n    \n    // Update document direction\n    document.documentElement.dir = lang === \"ar\" ? \"rtl\" : \"ltr\";\n    document.documentElement.lang = lang;\n  };\n\n  const t = (key: string): string => {\n    return translations[language][key as keyof typeof translations[typeof language]] || key;\n  };\n\n  return {\n    language,\n    direction,\n    setLanguage,\n    t,\n  };\n}\n","size_bytes":6596},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-store.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from \"react\";\n\ninterface StoreContextType {\n  currentEmployee: string;\n  currentStore: \"boutique\" | \"online\" | \"\";\n  setEmployee: (employee: string) => void;\n  setStore: (store: \"boutique\" | \"online\") => void;\n  isLoggedIn: boolean;\n  logout: () => void;\n}\n\nconst StoreContext = createContext<StoreContextType | undefined>(undefined);\n\nexport function StoreProvider({ children }: { children: React.ReactNode }) {\n  const [currentEmployee, setCurrentEmployee] = useState(\"\");\n  const [currentStore, setCurrentStore] = useState<\"boutique\" | \"online\" | \"\">(\"\");\n\n  useEffect(() => {\n    const savedEmployee = localStorage.getItem(\"larosa_employee\");\n    const savedStore = localStorage.getItem(\"larosa_store\");\n    \n    if (savedEmployee) setCurrentEmployee(savedEmployee);\n    if (savedStore && (savedStore === \"boutique\" || savedStore === \"online\")) {\n      setCurrentStore(savedStore);\n    }\n  }, []);\n\n  const setEmployee = (employee: string) => {\n    setCurrentEmployee(employee);\n    localStorage.setItem(\"larosa_employee\", employee);\n  };\n\n  const setStore = (store: \"boutique\" | \"online\") => {\n    setCurrentStore(store);\n    localStorage.setItem(\"larosa_store\", store);\n  };\n\n  const logout = () => {\n    setCurrentEmployee(\"\");\n    setCurrentStore(\"\");\n    localStorage.removeItem(\"larosa_employee\");\n    localStorage.removeItem(\"larosa_store\");\n  };\n\n  const isLoggedIn = !!(currentEmployee && currentStore);\n\n  const value = {\n    currentEmployee,\n    currentStore,\n    setEmployee,\n    setStore,\n    isLoggedIn,\n    logout,\n  };\n\n  return (\n    <StoreContext.Provider value={value}>\n      {children}\n    </StoreContext.Provider>\n  );\n}\n\nexport function useStore() {\n  const context = useContext(StoreContext);\n  if (context === undefined) {\n    throw new Error(\"useStore must be used within a StoreProvider\");\n  }\n  return context;\n}","size_bytes":1908},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/constants.ts":{"content":"export const EMPLOYEES = [\n  { id: \"abdulrahman\", name: \"عبد الرحمن\", icon: \"fas fa-user-tie\" },\n  { id: \"heba\", name: \"هبه\", icon: \"fas fa-user\" },\n  { id: \"hadeel\", name: \"هديل\", icon: \"fas fa-user\" },\n] as const;\n\nexport const STORES = [\n  { id: \"boutique\", name: \"البوتيك\", icon: \"fas fa-store\" },\n  { id: \"online\", name: \"أونلاين\", icon: \"fas fa-laptop\" },\n] as const;\n\nexport const PAYMENT_METHODS = {\n  boutique: [\n    { value: \"cash\", label: \"نقدي\" },\n    { value: \"card\", label: \"فيزا (ضريبة 5%)\" },\n  ],\n  online: [\n    { value: \"bank_transfer\", label: \"تحويل بنكي\" },\n    { value: \"cash_on_delivery\", label: \"دفع عند الاستلام\" },\n  ],\n} as const;\n\nexport const ORDER_STATUSES = [\n  { value: \"pending\", label: \"في الانتظار\", color: \"yellow\" },\n  { value: \"in_delivery\", label: \"في الطريق\", color: \"blue\" },\n  { value: \"delivered\", label: \"تم التوصيل\", color: \"green\" },\n  { value: \"cancelled\", label: \"ملغي\", color: \"red\" },\n] as const;\n\nexport const RETURN_TYPES = [\n  { value: \"refund\", label: \"استرداد\" },\n  { value: \"exchange_color\", label: \"استبدال لون\" },\n  { value: \"exchange_size\", label: \"استبدال مقاس\" },\n  { value: \"exchange_model\", label: \"استبدال موديل\" },\n] as const;\n\nexport const EMIRATES = [\n  \"أبوظبي\",\n  \"دبي\",\n  \"الشارقة\",\n  \"عجمان\",\n  \"أم القيوين\",\n  \"رأس الخيمة\",\n  \"الفجيرة\",\n] as const;\n\nexport const PRODUCT_TYPES = [\n  \"فستان\",\n  \"بلوزة\",\n  \"بنطال\",\n  \"جاكيت\",\n  \"حذاء\",\n  \"اكسسوارات\",\n  \"حقيبة\",\n  \"معطف\",\n] as const;\n\nexport const BRANDS = [\n  \"Zara\",\n  \"H&M\",\n  \"Mango\",\n  \"Forever 21\",\n  \"Massimo Dutti\",\n  \"Pull & Bear\",\n  \"Bershka\",\n  \"Stradivarius\",\n  \"أخرى\",\n] as const;\n\nexport const SIZES = [\n  \"38\", \"40\", \"42\", \"44\", \"46\", \"48\", \"50\", \"52\"\n] as const;\n\nexport const COLORS = [\n  \"أحمر\", \"أزرق\", \"أخضر\", \"أصفر\", \"برتقالي\", \"بنفسجي\", \"وردي\", \"بني\",\n  \"أسود\", \"أبيض\", \"رمادي\", \"كحلي\", \"عنابي\", \"بيج\", \"ذهبي\", \"فضي\"\n] as const;\n","size_bytes":2169},"client/src/lib/i18n.ts":{"content":"// Arabic translations for the LaRosa Fashion Store Management System\n\nexport const translations = {\n  // Navigation & Common\n  \"dashboard\": \"لوحة التحكم\",\n  \"inventory\": \"إدارة المخزون\",\n  \"sales\": \"المبيعات\",\n  \"orders\": \"الطلبات\",\n  \"returns\": \"المرتجعات\",\n  \"reports\": \"التقارير\",\n  \"logout\": \"تسجيل الخروج\",\n  \"login\": \"تسجيل الدخول\",\n  \"employee\": \"الموظف\",\n  \"store\": \"المتجر\",\n  \"select_employee\": \"اختر الموظف\",\n  \"select_store\": \"اختر المتجر\",\n  \n  // Product Management\n  \"add_product\": \"إضافة منتج\",\n  \"edit_product\": \"تعديل المنتج\",\n  \"delete_product\": \"حذف المنتج\",\n  \"product_details\": \"تفاصيل المنتج\",\n  \"model_number\": \"رقم الموديل\",\n  \"brand\": \"الشركة\",\n  \"product_type\": \"نوع القطعة\",\n  \"price\": \"السعر\",\n  \"store_price\": \"سعر البوتيك\",\n  \"online_price\": \"السعر الأونلاين\",\n  \"specifications\": \"المواصفات\",\n  \"image_url\": \"رابط الصورة\",\n  \"colors\": \"الألوان\",\n  \"sizes\": \"المقاسات\",\n  \"stock\": \"المخزون\",\n  \"available_stock\": \"المخزون المتاح\",\n  \"quantity\": \"الكمية\",\n  \"add_color\": \"إضافة لون\",\n  \"remove_color\": \"إزالة لون\",\n  \"add_size\": \"إضافة مقاس\",\n  \"size\": \"المقاس\",\n  \n  // Sales & Orders\n  \"new_sale\": \"بيع جديد\",\n  \"new_order\": \"طلب جديد\",\n  \"sale_details\": \"تفاصيل البيع\",\n  \"order_details\": \"تفاصيل الطلب\",\n  \"customer_name\": \"اسم الزبون\",\n  \"customer_phone\": \"رقم الهاتف\",\n  \"customer_address\": \"العنوان\",\n  \"customer_emirate\": \"الإمارة\",\n  \"tracking_number\": \"رقم التتبع\",\n  \"payment_method\": \"طريقة الدفع\",\n  \"cash\": \"نقدي\",\n  \"card\": \"بطاقة ائتمان\",\n  \"visa\": \"فيزا\",\n  \"bank_transfer\": \"تحويل بنكي\",\n  \"cash_on_delivery\": \"دفع عند الاستلام\",\n  \"tax\": \"الضريبة\",\n  \"total\": \"المجموع\",\n  \"subtotal\": \"المبلغ الفرعي\",\n  \"unit_price\": \"سعر الوحدة\",\n  \n  // Status\n  \"pending\": \"في الانتظار\",\n  \"processing\": \"قيد المعالجة\",\n  \"in_delivery\": \"في الطريق\",\n  \"delivered\": \"تم التوصيل\",\n  \"cancelled\": \"ملغي\",\n  \"completed\": \"مكتمل\",\n  \n  // Actions\n  \"save\": \"حفظ\",\n  \"cancel\": \"إلغاء\",\n  \"edit\": \"تعديل\",\n  \"delete\": \"حذف\",\n  \"view\": \"عرض\",\n  \"add\": \"إضافة\",\n  \"create\": \"إنشاء\",\n  \"update\": \"تحديث\",\n  \"search\": \"بحث\",\n  \"filter\": \"تصفية\",\n  \"export\": \"تصدير\",\n  \"print\": \"طباعة\",\n  \"back\": \"رجوع\",\n  \"next\": \"التالي\",\n  \"previous\": \"السابق\",\n  \n  // Messages\n  \"success\": \"نجح\",\n  \"error\": \"خطأ\",\n  \"warning\": \"تحذير\",\n  \"info\": \"معلومات\",\n  \"loading\": \"جاري التحميل...\",\n  \"no_data\": \"لا توجد بيانات\",\n  \"confirm_delete\": \"هل أنت متأكد من الحذف؟\",\n  \"operation_successful\": \"تمت العملية بنجاح\",\n  \"operation_failed\": \"فشلت العملية\",\n  \"validation_error\": \"خطأ في البيانات المدخلة\",\n  \"required_field\": \"هذا الحقل مطلوب\",\n  \"invalid_input\": \"المدخل غير صحيح\",\n  \n  // Dashboard\n  \"total_products\": \"إجمالي المنتجات\",\n  \"total_sales\": \"إجمالي المبيعات\",\n  \"total_orders\": \"إجمالي الطلبات\",\n  \"revenue\": \"الإيرادات\",\n  \"today_sales\": \"مبيعات اليوم\",\n  \"this_month\": \"هذا الشهر\",\n  \"top_products\": \"أفضل المنتجات\",\n  \"recent_activities\": \"الأنشطة الأخيرة\",\n  \n  // Returns\n  \"return_type\": \"نوع الإرجاع\",\n  \"refund\": \"استرداد\",\n  \"exchange\": \"استبدال\",\n  \"exchange_color\": \"استبدال لون\",\n  \"exchange_size\": \"استبدال مقاس\",\n  \"exchange_model\": \"استبدال موديل\",\n  \"return_reason\": \"سبب الإرجاع\",\n  \"original_sale\": \"البيع الأصلي\",\n  \"new_product\": \"المنتج الجديد\",\n  \"refund_amount\": \"مبلغ الاسترداد\",\n  \"price_difference\": \"فرق السعر\",\n  \n  // Form Labels\n  \"create_product\": \"إنشاء منتج جديد\",\n  \"product_information\": \"معلومات المنتج\",\n  \"inventory_management\": \"إدارة المخزون\",\n  \"colors_inventory\": \"الألوان والمخزون\",\n  \"sale_information\": \"معلومات البيع\",\n  \"order_information\": \"معلومات الطلب\",\n  \"customer_information\": \"معلومات الزبون\",\n  \"return_information\": \"معلومات الإرجاع\",\n  \n  // Buttons\n  \"view_stock\": \"عرض المخزون\",\n  \"add_to_inventory\": \"إضافة للمخزون\",\n  \"create_sale\": \"إنشاء بيع\",\n  \"create_order\": \"إنشاء طلب\",\n  \"process_return\": \"معالجة الإرجاع\",\n  \n  // Boutique vs Online\n  \"boutique\": \"البوتيك\",\n  \"online\": \"أونلاين\",\n  \"boutique_store\": \"متجر البوتيك\",\n  \"online_store\": \"المتجر الأونلاين\",\n  \n  // Emirates\n  \"abu_dhabi\": \"أبوظبي\",\n  \"dubai\": \"دبي\",\n  \"sharjah\": \"الشارقة\",\n  \"ajman\": \"عجمان\",\n  \"umm_al_quwain\": \"أم القيوين\",\n  \"ras_al_khaimah\": \"رأس الخيمة\",\n  \"fujairah\": \"الفجيرة\"\n} as const;\n\nexport type TranslationKey = keyof typeof translations;\n\n// Hook to use translations\nexport function useI18n() {\n  const t = (key: TranslationKey): string => {\n    return translations[key] || key;\n  };\n\n  return { t };\n}","size_bytes":5531},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { useStore } from \"@/hooks/use-store\";\n\nexport default function Dashboard() {\n  const { isLoggedIn, currentStore } = useStore();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      setLocation(\"/\");\n    }\n  }, [isLoggedIn, setLocation]);\n\n  const { data: dashboardData, isLoading } = useQuery({\n    queryKey: [`/api/${currentStore}/dashboard`],\n    enabled: !!currentStore,\n  });\n\n  if (!isLoggedIn) return null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"mb-6\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-2\">Dashboard</h2>\n            <p className=\"text-muted-foreground\">Overview of store performance and key metrics</p>\n          </div>\n          \n          {/* Key Metrics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total Products</p>\n                    {isLoading ? (\n                      <Skeleton className=\"h-8 w-16 mt-1\" />\n                    ) : (\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"metric-total-products\">\n                        {dashboardData?.metrics?.totalProducts || 0}\n                      </p>\n                    )}\n                  </div>\n                  <i className=\"fas fa-box text-primary text-xl\"></i>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Today's Sales</p>\n                    {isLoading ? (\n                      <Skeleton className=\"h-8 w-20 mt-1\" />\n                    ) : (\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"metric-today-sales\">\n                        AED {dashboardData?.metrics?.todaySales || \"0\"}\n                      </p>\n                    )}\n                  </div>\n                  <i className=\"fas fa-chart-line text-accent text-xl\"></i>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {currentStore === \"online\" && (\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Pending Orders</p>\n                      {isLoading ? (\n                        <Skeleton className=\"h-8 w-12 mt-1\" />\n                      ) : (\n                        <p className=\"text-2xl font-bold text-foreground\" data-testid=\"metric-pending-orders\">\n                          {dashboardData?.metrics?.pendingOrders || 0}\n                        </p>\n                      )}\n                    </div>\n                    <i className=\"fas fa-clock text-yellow-500 text-xl\"></i>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Low Stock Items</p>\n                    {isLoading ? (\n                      <Skeleton className=\"h-8 w-12 mt-1\" />\n                    ) : (\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"metric-low-stock\">\n                        {dashboardData?.metrics?.lowStockItems || 0}\n                      </p>\n                    )}\n                  </div>\n                  <i className=\"fas fa-exclamation-triangle text-destructive text-xl\"></i>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Top Products */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Top Selling Products</h3>\n              {isLoading ? (\n                <div className=\"space-y-3\">\n                  {[1, 2, 3].map((i) => (\n                    <div key={i} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Skeleton className=\"w-10 h-10 rounded-lg\" />\n                        <div>\n                          <Skeleton className=\"h-4 w-32\" />\n                          <Skeleton className=\"h-3 w-16 mt-1\" />\n                        </div>\n                      </div>\n                      <Skeleton className=\"h-4 w-20\" />\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-3\" data-testid=\"top-products-list\">\n                  {dashboardData?.topProducts?.length > 0 ? (\n                    dashboardData.topProducts.map((product: any, index: number) => (\n                      <div key={index} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 rounded-lg bg-muted flex items-center justify-center\">\n                            <i className=\"fas fa-box text-muted-foreground\"></i>\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-sm\" data-testid={`product-name-${index}`}>\n                              {product.productName}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\" data-testid={`product-sold-${index}`}>\n                              {product.totalSold} sold\n                            </p>\n                          </div>\n                        </div>\n                        <span className=\"text-sm font-medium\" data-testid={`product-revenue-${index}`}>\n                          AED {product.totalRevenue}\n                        </span>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-muted-foreground text-center py-4\">No sales data available</p>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7006},"client/src/pages/inventory.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useI18n } from \"@/lib/i18n\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport ProductForm from \"@/components/inventory/product-form\";\nimport ProductDetailsModal from \"@/components/inventory/product-details-modal\";\nimport { useStore } from \"@/hooks/use-store\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { BRANDS, PRODUCT_TYPES } from \"@/lib/constants\";\nimport type { ProductWithColors } from \"@shared/schema\";\n\nexport default function Inventory() {\n  const { isLoggedIn, currentStore } = useStore();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { t } = useI18n();\n  const queryClient = useQueryClient();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [brandFilter, setBrandFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [stockFilter, setStockFilter] = useState(\"all\");\n  const [showProductForm, setShowProductForm] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState<ProductWithColors | null>(null);\n  const [showProductDetails, setShowProductDetails] = useState(false);\n  const [showEditProduct, setShowEditProduct] = useState(false);\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      setLocation(\"/\");\n    }\n  }, [isLoggedIn, setLocation]);\n\n  const { data: products = [], isLoading } = useQuery({\n    queryKey: [`/api/${currentStore}/products`, searchTerm],\n    enabled: !!currentStore,\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (productId: number) => {\n      await apiRequest(\"DELETE\", `/api/products/${productId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/${currentStore}/products`] });\n      toast({\n        title: \"Success\",\n        description: \"Product deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteProduct = (productId: number) => {\n    if (confirm(t(\"confirm_delete\"))) {\n      deleteProductMutation.mutate(productId);\n    }\n  };\n\n  const getStockStatus = (product: ProductWithColors) => {\n    const totalStock = product.colors.reduce((total, color) => {\n      return total + color.inventory\n        .filter(inv => inv.store === currentStore)\n        .reduce((colorTotal, inv) => colorTotal + inv.quantity, 0);\n    }, 0);\n\n    if (totalStock === 0) return { status: \"Out of stock\", variant: \"destructive\" as const };\n    if (totalStock < 5) return { status: `${totalStock} items`, variant: \"secondary\" as const };\n    return { status: `${totalStock} items`, variant: \"default\" as const };\n  };\n\n  const filteredProducts = (products as ProductWithColors[]).filter((product: ProductWithColors) => {\n    const matchesSearch = !searchTerm || \n      product.modelNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.brand.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesBrand = brandFilter === \"all\" || product.brand === brandFilter;\n    const matchesType = typeFilter === \"all\" || product.productType === typeFilter;\n    \n    let matchesStock = true;\n    if (stockFilter !== \"all\") {\n      const stockStatus = getStockStatus(product);\n      if (stockFilter === \"in_stock\" && stockStatus.status === \"Out of stock\") matchesStock = false;\n      if (stockFilter === \"low_stock\" && stockStatus.variant !== \"secondary\") matchesStock = false;\n      if (stockFilter === \"out_of_stock\" && stockStatus.status !== \"Out of stock\") matchesStock = false;\n    }\n\n    return matchesSearch && matchesBrand && matchesType && matchesStock;\n  });\n\n  if (!isLoggedIn) return null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground mb-2 text-right\">{t(\"inventory\")}</h2>\n              <p className=\"text-muted-foreground text-right\">إدارة المنتجات والألوان والمقاسات وكميات المخزون</p>\n            </div>\n            <Dialog open={showProductForm} onOpenChange={setShowProductForm}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-primary text-primary-foreground\" data-testid=\"button-add-product\">\n                  <i className=\"fas fa-plus ml-2\"></i>\n                  {t(\"add_product\")}\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>{t(\"add_product\")}</DialogTitle>\n                </DialogHeader>\n                <ProductForm\n                  onSuccess={() => {\n                    setShowProductForm(false);\n                    queryClient.invalidateQueries({ queryKey: [`/api/${currentStore}/products`] });\n                  }}\n                />\n              </DialogContent>\n            </Dialog>\n          </div>\n          \n          {/* Search and Filters */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Search Products</label>\n                  <Input\n                    placeholder=\"Product code, model, brand...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    data-testid=\"input-search-products\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Brand</label>\n                  <Select value={brandFilter} onValueChange={setBrandFilter}>\n                    <SelectTrigger data-testid=\"select-brand-filter\">\n                      <SelectValue placeholder=\"All Brands\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Brands</SelectItem>\n                      {BRANDS.map((brand) => (\n                        <SelectItem key={brand} value={brand}>{brand}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Product Type</label>\n                  <Select value={typeFilter} onValueChange={setTypeFilter}>\n                    <SelectTrigger data-testid=\"select-type-filter\">\n                      <SelectValue placeholder=\"All Types\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Types</SelectItem>\n                      {PRODUCT_TYPES.map((type) => (\n                        <SelectItem key={type} value={type}>{type}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Stock Status</label>\n                  <Select value={stockFilter} onValueChange={setStockFilter}>\n                    <SelectTrigger data-testid=\"select-stock-filter\">\n                      <SelectValue placeholder=\"All Stock\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Stock</SelectItem>\n                      <SelectItem value=\"in_stock\">In Stock</SelectItem>\n                      <SelectItem value=\"low_stock\">Low Stock</SelectItem>\n                      <SelectItem value=\"out_of_stock\">Out of Stock</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Products Grid */}\n          <div className=\"products-grid\">\n            {isLoading ? (\n              Array.from({ length: 8 }).map((_, i) => (\n                <Card key={i} className=\"product-card\">\n                  <CardContent className=\"p-0\">\n                    <Skeleton className=\"product-card-image\" />\n                    <div className=\"p-6\">\n                      <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                      <Skeleton className=\"h-4 w-1/2 mb-2\" />\n                      <Skeleton className=\"h-4 w-2/3 mb-2\" />\n                      <Skeleton className=\"h-8 w-20 mb-4\" />\n                      <div className=\"flex gap-2\">\n                        <Skeleton className=\"h-10 w-20\" />\n                        <Skeleton className=\"h-10 w-20\" />\n                        <Skeleton className=\"h-10 w-20\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : filteredProducts.length === 0 ? (\n              <div className=\"col-span-full text-center py-12\">\n                <i className=\"fas fa-box-open text-4xl text-muted-foreground mb-4\"></i>\n                <p className=\"text-muted-foreground text-lg\">{t(\"no_data\")}</p>\n              </div>\n            ) : (\n              filteredProducts.map((product: ProductWithColors) => {\n                const stockStatus = getStockStatus(product);\n                const currentPrice = currentStore === 'boutique' ? product.storePriceAED : product.onlinePriceAED;\n                return (\n                  <Card key={product.id} className=\"product-card group hover:shadow-xl transition-shadow duration-300\" data-testid={`product-card-${product.id}`}>\n                    <CardContent className=\"p-0\">\n                      {/* Product Image */}\n                      <div className=\"relative overflow-hidden rounded-t-lg\">\n                        {product.imageUrl ? (\n                          <img\n                            src={product.imageUrl}\n                            alt={`${product.brand} ${product.modelNumber}`}\n                            className=\"product-card-image transition-transform duration-300 group-hover:scale-105\"\n                            data-testid={`product-image-${product.id}`}\n                          />\n                        ) : (\n                          <div className=\"product-card-image bg-muted flex items-center justify-center\">\n                            <i className=\"fas fa-image text-4xl text-muted-foreground\"></i>\n                          </div>\n                        )}\n                        <div className=\"absolute top-3 right-3\">\n                          <Badge variant={stockStatus.variant} data-testid={`product-stock-${product.id}`}>\n                            {stockStatus.status}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      {/* Product Info */}\n                      <div className=\"p-6\">\n                        <h3 className=\"product-card-title\" data-testid={`product-name-${product.id}`}>\n                          {product.brand} - {product.modelNumber}\n                        </h3>\n                        <p className=\"product-card-info\">\n                          <span className=\"font-medium\">{t(\"brand\")}:</span> {product.brand}\n                        </p>\n                        <p className=\"product-card-info\">\n                          <span className=\"font-medium\">{t(\"product_type\")}:</span> {product.productType}\n                        </p>\n                        <p className=\"product-card-info\">\n                          <span className=\"font-medium\">{t(\"model_number\")}:</span> {product.modelNumber}\n                        </p>\n                        \n                        <div className=\"product-card-price number-ltr\">\n                          {currentPrice} AED\n                        </div>\n                        \n                        {/* Action Buttons */}\n                        <div className=\"product-card-actions\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex-1\"\n                            onClick={() => {\n                              setSelectedProduct(product);\n                              setShowProductDetails(true);\n                            }}\n                            data-testid={`button-stock-${product.id}`}\n                          >\n                            <i className=\"fas fa-box mr-2\"></i>\n                            {t(\"view_stock\")}\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex-1\"\n                            onClick={() => {\n                              setSelectedProduct(product);\n                              setShowEditProduct(true);\n                            }}\n                            data-testid={`button-edit-${product.id}`}\n                          >\n                            <i className=\"fas fa-edit mr-2\"></i>\n                            {t(\"edit_product\")}\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex-1 text-destructive border-destructive hover:bg-destructive hover:text-destructive-foreground\"\n                            onClick={() => handleDeleteProduct(product.id)}\n                            data-testid={`button-delete-${product.id}`}\n                          >\n                            <i className=\"fas fa-trash mr-2\"></i>\n                            {t(\"delete_product\")}\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })\n            )}\n          </div>\n\n          {/* Product Details Modal */}\n          {selectedProduct && (\n            <ProductDetailsModal\n              product={selectedProduct}\n              open={showProductDetails}\n              onOpenChange={setShowProductDetails}\n            />\n          )}\n\n          {/* Edit Product Modal */}\n          {selectedProduct && (\n            <Dialog open={showEditProduct} onOpenChange={setShowEditProduct}>\n              <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>{t(\"edit_product\")}</DialogTitle>\n                </DialogHeader>\n                <ProductForm\n                  product={selectedProduct}\n                  onSuccess={() => {\n                    setShowEditProduct(false);\n                    setSelectedProduct(null);\n                    queryClient.invalidateQueries({ queryKey: [`/api/${currentStore}/products`] });\n                  }}\n                />\n              </DialogContent>\n            </Dialog>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15904},"client/src/pages/login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useStore } from \"@/hooks/use-store\";\nimport { useI18n } from \"@/lib/i18n\";\nimport { EMPLOYEES, STORES } from \"@/lib/constants\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { setEmployee, setStore, isLoggedIn } = useStore();\n  const { t } = useI18n();\n  const [selectedEmployee, setSelectedEmployee] = useState(\"\");\n  const [selectedStore, setSelectedStore] = useState<\"boutique\" | \"online\" | \"\">(\"\");\n  const [showStoreSelection, setShowStoreSelection] = useState(false);\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      setLocation(\"/dashboard\");\n    }\n  }, [isLoggedIn, setLocation]);\n\n  const handleEmployeeSelect = (employeeId: string) => {\n    setSelectedEmployee(employeeId);\n    setShowStoreSelection(true);\n  };\n\n  const handleStoreSelect = (storeId: \"boutique\" | \"online\") => {\n    setSelectedStore(storeId);\n  };\n\n  const handleLogin = () => {\n    if (selectedEmployee && selectedStore) {\n      setEmployee(selectedEmployee);\n      setStore(selectedStore);\n      setLocation(\"/dashboard\");\n    }\n  };\n\n  const canLogin = selectedEmployee && selectedStore;\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center gradient-bg p-4 login-theme\">\n      <Card className=\"w-full max-w-md card-gold-border bg-card/95 backdrop-blur-sm shadow-2xl\">\n        <CardContent className=\"p-8\">\n          {/* LaRosa Branding */}\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold gold-gradient mb-4\">LaRosa</h1>\n            <p className=\"text-card-foreground text-base font-medium\">نظام إدارة متجر الأزياء</p>\n          </div>\n\n          <div className=\"space-y-6\">\n            {/* Employee Selection */}\n            <div>\n              <label className=\"block text-sm font-medium mb-3 text-right text-card-foreground\">{t(\"select_employee\")}</label>\n              <div className=\"space-y-2\">\n                {EMPLOYEES.map((employee) => (\n                  <Button\n                    key={employee.id}\n                    variant={selectedEmployee === employee.id ? \"default\" : \"outline\"}\n                    className={`w-full justify-between h-auto p-4 ${selectedEmployee === employee.id ? 'bg-primary text-primary-foreground border-primary' : 'border-border hover:border-primary/50'} transition-all duration-200`}\n                    onClick={() => handleEmployeeSelect(employee.id)}\n                    data-testid={`button-employee-${employee.id}`}\n                  >\n                    <span className=\"text-right font-medium\">{employee.name}</span>\n                    <i className={`${employee.icon} ${selectedEmployee === employee.id ? 'text-primary-foreground' : 'text-primary'}`} />\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            {/* Store Selection */}\n            {showStoreSelection && (\n              <div>\n                <label className=\"block text-sm font-medium mb-3 text-right text-card-foreground\">{t(\"select_store\")}</label>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  {STORES.map((store) => (\n                    <Button\n                      key={store.id}\n                      variant={selectedStore === store.id ? \"default\" : \"outline\"}\n                      className={`p-6 h-auto flex-col ${selectedStore === store.id ? 'bg-primary text-primary-foreground border-primary' : 'border-border hover:border-primary/50'} transition-all duration-200`}\n                      onClick={() => handleStoreSelect(store.id as \"boutique\" | \"online\")}\n                      data-testid={`button-store-${store.id}`}\n                    >\n                      <i className={`${store.icon} text-3xl ${selectedStore === store.id ? 'text-primary-foreground' : 'text-primary'} mb-3`} />\n                      <span className=\"text-base font-medium\">{store.name}</span>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <Button\n              className=\"w-full mt-8 bg-primary text-primary-foreground hover:bg-primary/90 font-semibold py-4 text-lg border-2 border-primary hover:border-primary/90 transition-all duration-200 shadow-lg\"\n              disabled={!canLogin}\n              onClick={handleLogin}\n              data-testid=\"button-login\"\n            >\n              {t(\"login\")}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4664},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/orders.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport OrderForm from \"@/components/orders/order-form\";\nimport OrderDetailsModal from \"@/components/orders/order-details-modal\";\nimport { useStore } from \"@/hooks/use-store\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ORDER_STATUSES } from \"@/lib/constants\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { OrderWithDetails } from \"@shared/schema\";\n\nexport default function Orders() {\n  const { isLoggedIn, currentStore } = useStore();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [showOrderForm, setShowOrderForm] = useState(false);\n  const [selectedOrder, setSelectedOrder] = useState<OrderWithDetails | null>(null);\n  const [showOrderDetails, setShowOrderDetails] = useState(false);\n  const [statusFilter, setStatusFilter] = useState(\"\");\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      setLocation(\"/\");\n    }\n    // Redirect boutique users away from orders page\n    if (currentStore === \"boutique\") {\n      setLocation(\"/sales\");\n    }\n  }, [isLoggedIn, currentStore, setLocation]);\n\n  const { data: orders = [], isLoading } = useQuery({\n    queryKey: [\"/api/orders\", statusFilter],\n    enabled: currentStore === \"online\",\n  });\n\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string; status: string }) => {\n      await apiRequest(\"PUT\", `/api/orders/${orderId}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      queryClient.invalidateQueries({ queryKey: [`/api/${currentStore}/dashboard`] });\n      toast({\n        title: \"Success\",\n        description: \"Order status updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update order status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleOrderSuccess = () => {\n    setShowOrderForm(false);\n    queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n    queryClient.invalidateQueries({ queryKey: [`/api/${currentStore}/dashboard`] });\n    toast({\n      title: \"Success\",\n      description: \"Order created successfully\",\n    });\n  };\n\n  const getStatusDisplay = (status: string) => {\n    const statusConfig = ORDER_STATUSES.find(s => s.value === status);\n    if (!statusConfig) return { label: status, variant: \"outline\" as const };\n\n    const variantMap = {\n      yellow: \"secondary\" as const,\n      blue: \"default\" as const,\n      green: \"default\" as const,\n      red: \"destructive\" as const,\n    };\n\n    return {\n      label: statusConfig.label,\n      variant: variantMap[statusConfig.color as keyof typeof variantMap] || \"outline\" as const,\n    };\n  };\n\n  const getPaymentMethodDisplay = (method: string) => {\n    switch (method) {\n      case \"cash_on_delivery\":\n        return { label: \"Cash on Delivery\", variant: \"default\" as const };\n      case \"bank_transfer\":\n        return { label: \"Bank Transfer\", variant: \"secondary\" as const };\n      default:\n        return { label: method, variant: \"outline\" as const };\n    }\n  };\n\n  if (!isLoggedIn || currentStore !== \"online\") return null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground mb-2\">Online Orders</h2>\n              <p className=\"text-muted-foreground\">Manage online orders with customer information and delivery tracking</p>\n            </div>\n            <Button\n              className=\"bg-primary text-primary-foreground\"\n              onClick={() => setShowOrderForm(!showOrderForm)}\n              data-testid=\"button-new-order\"\n            >\n              <i className=\"fas fa-plus mr-2\"></i>\n              New Order\n            </Button>\n          </div>\n\n          {/* Order Form */}\n          {showOrderForm && (\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle>Create New Order</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <OrderForm\n                  onSuccess={handleOrderSuccess}\n                  onCancel={() => setShowOrderForm(false)}\n                />\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Order Status Filters */}\n          <div className=\"flex space-x-4 mb-6\">\n            <Button\n              variant={statusFilter === \"\" ? \"default\" : \"outline\"}\n              onClick={() => setStatusFilter(\"\")}\n              data-testid=\"filter-all-orders\"\n            >\n              All Orders\n            </Button>\n            {ORDER_STATUSES.map((status) => (\n              <Button\n                key={status.value}\n                variant={statusFilter === status.value ? \"default\" : \"outline\"}\n                onClick={() => setStatusFilter(status.value)}\n                data-testid={`filter-${status.value}`}\n              >\n                {status.label}\n              </Button>\n            ))}\n          </div>\n          \n          {/* Orders Table */}\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Order ID</TableHead>\n                    <TableHead>Customer</TableHead>\n                    <TableHead>Product</TableHead>\n                    <TableHead>Tracking</TableHead>\n                    <TableHead>Payment</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Total</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {isLoading ? (\n                    Array.from({ length: 5 }).map((_, i) => (\n                      <TableRow key={i}>\n                        <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-12 w-32\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-40\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-6 w-24\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-6 w-20\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-8 w-16\" /></TableCell>\n                      </TableRow>\n                    ))\n                  ) : orders.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={8} className=\"text-center py-8 text-muted-foreground\">\n                        No orders found\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    orders.map((order: any) => {\n                      const statusDisplay = getStatusDisplay(order.status);\n                      const paymentDisplay = getPaymentMethodDisplay(order.paymentMethod);\n                      \n                      return (\n                        <TableRow key={order.id} className=\"hover:bg-muted\">\n                          <TableCell className=\"font-mono text-sm\" data-testid={`order-id-${order.id}`}>\n                            #{order.orderId}\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <p className=\"font-medium text-sm\" data-testid={`customer-name-${order.id}`}>\n                                {order.customerName}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\" data-testid={`customer-phone-${order.id}`}>\n                                {order.customerPhone}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\" data-testid={`customer-emirate-${order.id}`}>\n                                {order.customerEmirate}\n                              </p>\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"text-sm\" data-testid={`order-product-${order.id}`}>\n                            {order.productColor?.product?.brand} {order.productColor?.product?.modelNumber} (Size {order.size})\n                          </TableCell>\n                          <TableCell className=\"font-mono text-sm\" data-testid={`tracking-number-${order.id}`}>\n                            {order.trackingNumber || \"N/A\"}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={paymentDisplay.variant} data-testid={`payment-method-${order.id}`}>\n                              {paymentDisplay.label}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={statusDisplay.variant} data-testid={`order-status-${order.id}`}>\n                              {statusDisplay.label}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"text-sm font-medium\" data-testid={`order-total-${order.id}`}>\n                            AED {order.totalAmount}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setSelectedOrder(order);\n                                  setShowOrderDetails(true);\n                                }}\n                                data-testid={`button-view-order-${order.id}`}\n                              >\n                                <i className=\"fas fa-eye\"></i>\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  const newStatus = prompt(\"Enter new status (pending, in_delivery, delivered, cancelled):\");\n                                  if (newStatus && ORDER_STATUSES.some(s => s.value === newStatus)) {\n                                    updateOrderStatusMutation.mutate({\n                                      orderId: order.orderId,\n                                      status: newStatus,\n                                    });\n                                  }\n                                }}\n                                data-testid={`button-edit-status-${order.id}`}\n                              >\n                                <i className=\"fas fa-edit\"></i>\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })\n                  )}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n\n          {/* Order Details Modal */}\n          {selectedOrder && (\n            <OrderDetailsModal\n              order={selectedOrder}\n              open={showOrderDetails}\n              onOpenChange={setShowOrderDetails}\n            />\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12338},"client/src/pages/reports.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { useStore } from \"@/hooks/use-store\";\nimport { generateExport } from \"@/lib/utils/export\";\n\nexport default function Reports() {\n  const { isLoggedIn, currentStore } = useStore();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const [exportStore, setExportStore] = useState(currentStore);\n  const [dateRange, setDateRange] = useState(\"month\");\n  const [exportFormat, setExportFormat] = useState(\"csv\");\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      setLocation(\"/\");\n    }\n  }, [isLoggedIn, setLocation]);\n\n  const { data: dashboardData } = useQuery({\n    queryKey: [`/api/${currentStore}/dashboard`],\n    enabled: !!currentStore,\n  });\n\n  const handleGenerateExport = async () => {\n    try {\n      const success = await generateExport(exportStore, dateRange, exportFormat);\n      if (success) {\n        toast({\n          title: \"Success\",\n          description: \"Export generated successfully\",\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to generate export\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate export\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!isLoggedIn) return null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground mb-2\">Reports & Analytics</h2>\n              <p className=\"text-muted-foreground\">Generate comprehensive reports and export data</p>\n            </div>\n            <Button\n              className=\"bg-primary text-primary-foreground\"\n              onClick={handleGenerateExport}\n              data-testid=\"button-generate-export\"\n            >\n              <i className=\"fas fa-download mr-2\"></i>\n              Generate Export\n            </Button>\n          </div>\n          \n          {/* Export Configuration */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Export Configuration</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Store</label>\n                  <Select value={exportStore} onValueChange={setExportStore}>\n                    <SelectTrigger data-testid=\"select-export-store\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"boutique\">Boutique</SelectItem>\n                      <SelectItem value=\"online\">Online</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Date Range</label>\n                  <Select value={dateRange} onValueChange={setDateRange}>\n                    <SelectTrigger data-testid=\"select-date-range\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"today\">Today</SelectItem>\n                      <SelectItem value=\"week\">This Week</SelectItem>\n                      <SelectItem value=\"month\">This Month</SelectItem>\n                      <SelectItem value=\"custom\">Custom Range</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Export Format</label>\n                  <Select value={exportFormat} onValueChange={setExportFormat}>\n                    <SelectTrigger data-testid=\"select-export-format\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"csv\">CSV Files</SelectItem>\n                      <SelectItem value=\"json\">JSON Files</SelectItem>\n                      <SelectItem value=\"excel\">Excel Workbook</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Export Structure Preview */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Export Structure Preview</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"bg-muted rounded-lg p-4 font-mono text-sm\" data-testid=\"export-structure-preview\">\n                <div className=\"text-primary font-bold\">LaRosa_Export_{exportStore}_{new Date().toISOString().split('T')[0]}/</div>\n                <div className=\"ml-4\">├─ product_catalog_{exportStore}.csv</div>\n                <div className=\"ml-4\">├─ sizes_colors_{exportStore}.csv</div>\n                <div className=\"ml-4\">├─ inventory_report_{exportStore}.csv</div>\n                <div className=\"ml-4\">├─ sales_report_{exportStore}.csv</div>\n                <div className=\"ml-4\">├─ returns_report_{exportStore}.csv</div>\n                {exportStore === \"online\" && (\n                  <div className=\"ml-4\">├─ orders_report_{exportStore}.csv</div>\n                )}\n                <div className=\"ml-4\">├─ images/</div>\n                <div className=\"ml-8\">│   ├─ product_images...</div>\n                <div className=\"ml-4\">└─ readme_{exportStore}.txt</div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Analytics Dashboard */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Sales Performance */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Sales Performance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Today's Revenue</span>\n                    <span className=\"font-bold text-lg\" data-testid=\"today-revenue\">\n                      AED {dashboardData?.metrics?.todaySales || \"0\"}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Total Products</span>\n                    <span className=\"font-bold text-lg\" data-testid=\"total-products-analytics\">\n                      {dashboardData?.metrics?.totalProducts || 0}\n                    </span>\n                  </div>\n                  {currentStore === \"online\" && (\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-muted-foreground\">Pending Orders</span>\n                      <span className=\"font-bold text-lg\" data-testid=\"pending-orders-analytics\">\n                        {dashboardData?.metrics?.pendingOrders || 0}\n                      </span>\n                    </div>\n                  )}\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Low Stock Items</span>\n                    <span className=\"font-bold text-lg text-destructive\" data-testid=\"low-stock-analytics\">\n                      {dashboardData?.metrics?.lowStockItems || 0}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Top Products */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Top Selling Products</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\" data-testid=\"analytics-top-products\">\n                  {dashboardData?.topProducts?.length > 0 ? (\n                    dashboardData.topProducts.map((product: any, index: number) => (\n                      <div key={index} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 rounded-lg bg-muted flex items-center justify-center\">\n                            <i className=\"fas fa-box text-muted-foreground\"></i>\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-sm\" data-testid={`analytics-product-name-${index}`}>\n                              {product.productName}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\" data-testid={`analytics-product-sold-${index}`}>\n                              {product.totalSold} sold\n                            </p>\n                          </div>\n                        </div>\n                        <span className=\"text-sm font-medium\" data-testid={`analytics-product-revenue-${index}`}>\n                          AED {product.totalRevenue}\n                        </span>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-muted-foreground text-center py-4\">No sales data available</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10150},"client/src/pages/returns.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport ReturnForm from \"@/components/returns/return-form\";\nimport { useStore } from \"@/hooks/use-store\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { ReturnWithDetails } from \"@shared/schema\";\n\nexport default function Returns() {\n  const { isLoggedIn, currentStore } = useStore();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showReturnForm, setShowReturnForm] = useState(false);\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      setLocation(\"/\");\n    }\n  }, [isLoggedIn, setLocation]);\n\n  const { data: returns = [], isLoading } = useQuery({\n    queryKey: [`/api/${currentStore}/returns`],\n    enabled: !!currentStore,\n  });\n\n  const handleReturnSuccess = () => {\n    setShowReturnForm(false);\n    queryClient.invalidateQueries({ queryKey: [`/api/${currentStore}/returns`] });\n    queryClient.invalidateQueries({ queryKey: [`/api/${currentStore}/dashboard`] });\n    toast({\n      title: \"Success\",\n      description: \"Return/Exchange processed successfully\",\n    });\n  };\n\n  const getReturnTypeDisplay = (type: string) => {\n    switch (type) {\n      case \"refund\":\n        return { label: \"Refund\", variant: \"destructive\" as const };\n      case \"exchange_color\":\n        return { label: \"Color Exchange\", variant: \"default\" as const };\n      case \"exchange_size\":\n        return { label: \"Size Exchange\", variant: \"default\" as const };\n      case \"exchange_model\":\n        return { label: \"Model Exchange\", variant: \"secondary\" as const };\n      default:\n        return { label: type, variant: \"outline\" as const };\n    }\n  };\n\n  if (!isLoggedIn) return null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground mb-2\">Returns & Exchanges</h2>\n              <p className=\"text-muted-foreground\">Process refunds and exchanges with automatic inventory updates</p>\n            </div>\n            <Button\n              className=\"bg-primary text-primary-foreground\"\n              onClick={() => setShowReturnForm(!showReturnForm)}\n              data-testid=\"button-new-return\"\n            >\n              <i className=\"fas fa-plus mr-2\"></i>\n              Process Return\n            </Button>\n          </div>\n\n          {/* Return Form */}\n          {showReturnForm && (\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle>Process Return or Exchange</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ReturnForm\n                  onSuccess={handleReturnSuccess}\n                  onCancel={() => setShowReturnForm(false)}\n                />\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Returns History */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Returns & Exchanges History</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Return ID</TableHead>\n                    <TableHead>Original Sale</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Product</TableHead>\n                    <TableHead>Details</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Date</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {isLoading ? (\n                    Array.from({ length: 5 }).map((_, i) => (\n                      <TableRow key={i}>\n                        <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-6 w-24\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-40\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      </TableRow>\n                    ))\n                  ) : returns.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\n                        No returns found\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    returns.map((returnItem: any) => {\n                      const typeDisplay = getReturnTypeDisplay(returnItem.returnType);\n                      return (\n                        <TableRow key={returnItem.id}>\n                          <TableCell className=\"font-mono text-sm\" data-testid={`return-id-${returnItem.id}`}>\n                            #{returnItem.returnId}\n                          </TableCell>\n                          <TableCell className=\"font-mono text-sm\" data-testid={`original-sale-${returnItem.id}`}>\n                            #{returnItem.originalSaleId || returnItem.originalOrderId || \"N/A\"}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={typeDisplay.variant} data-testid={`return-type-${returnItem.id}`}>\n                              {typeDisplay.label}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"text-sm\" data-testid={`return-product-${returnItem.id}`}>\n                            {returnItem.originalProductColor?.product?.brand} {returnItem.originalProductColor?.product?.modelNumber}\n                          </TableCell>\n                          <TableCell className=\"text-sm\" data-testid={`return-details-${returnItem.id}`}>\n                            {returnItem.returnType === \"refund\" ? (\n                              `${returnItem.originalProductColor?.colorName}, Size ${returnItem.originalSize}`\n                            ) : (\n                              `${returnItem.originalProductColor?.colorName} Size ${returnItem.originalSize} → ${returnItem.newProductColor?.colorName || \"N/A\"} Size ${returnItem.newSize || \"N/A\"}`\n                            )}\n                          </TableCell>\n                          <TableCell className=\"text-sm font-medium\" data-testid={`return-amount-${returnItem.id}`}>\n                            {returnItem.returnType === \"refund\" ? (\n                              `AED ${returnItem.refundAmount || \"0\"}`\n                            ) : (\n                              returnItem.priceDifference && parseFloat(returnItem.priceDifference) !== 0 ? (\n                                `${parseFloat(returnItem.priceDifference) > 0 ? \"+\" : \"\"}AED ${returnItem.priceDifference}`\n                              ) : (\n                                \"AED 0\"\n                              )\n                            )}\n                          </TableCell>\n                          <TableCell className=\"text-sm text-muted-foreground\" data-testid={`return-date-${returnItem.id}`}>\n                            {formatDistanceToNow(new Date(returnItem.createdAt), { addSuffix: true })}\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })\n                  )}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8409},"client/src/pages/sales.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport SalesForm from \"@/components/sales/sales-form\";\nimport { useStore } from \"@/hooks/use-store\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { SaleWithDetails } from \"@shared/schema\";\n\nexport default function Sales() {\n  const { isLoggedIn, currentStore } = useStore();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showSalesForm, setShowSalesForm] = useState(false);\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      setLocation(\"/\");\n    }\n  }, [isLoggedIn, setLocation]);\n\n  const { data: sales = [], isLoading } = useQuery({\n    queryKey: [`/api/${currentStore}/sales`],\n    enabled: !!currentStore,\n  });\n\n  const handleSaleSuccess = () => {\n    setShowSalesForm(false);\n    queryClient.invalidateQueries({ queryKey: [`/api/${currentStore}/sales`] });\n    queryClient.invalidateQueries({ queryKey: [`/api/${currentStore}/dashboard`] });\n    toast({\n      title: \"Success\",\n      description: \"Sale completed successfully\",\n    });\n  };\n\n  const getPaymentMethodDisplay = (method: string) => {\n    switch (method) {\n      case \"cash\":\n        return { label: \"Cash\", variant: \"default\" as const };\n      case \"card\":\n        return { label: \"Card\", variant: \"secondary\" as const };\n      default:\n        return { label: method, variant: \"outline\" as const };\n    }\n  };\n\n  if (!isLoggedIn) return null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground mb-2\">Sales Management</h2>\n              <p className=\"text-muted-foreground\">\n                Process <span className=\"capitalize\">{currentStore}</span> sales with automatic inventory updates\n              </p>\n            </div>\n            <Button\n              className=\"bg-primary text-primary-foreground\"\n              onClick={() => setShowSalesForm(!showSalesForm)}\n              data-testid=\"button-new-sale\"\n            >\n              <i className=\"fas fa-plus mr-2\"></i>\n              New Sale\n            </Button>\n          </div>\n          \n          {/* Sales Form */}\n          {showSalesForm && (\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle>Create New Sale</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <SalesForm\n                  onSuccess={handleSaleSuccess}\n                  onCancel={() => setShowSalesForm(false)}\n                />\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Recent Sales */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Sales</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Sale ID</TableHead>\n                    <TableHead>Product</TableHead>\n                    <TableHead>Color</TableHead>\n                    <TableHead>Size</TableHead>\n                    <TableHead>Quantity</TableHead>\n                    <TableHead>Payment</TableHead>\n                    <TableHead>Total</TableHead>\n                    <TableHead>Time</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {isLoading ? (\n                    Array.from({ length: 5 }).map((_, i) => (\n                      <TableRow key={i}>\n                        <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-12\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-8\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-6 w-16\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                        <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      </TableRow>\n                    ))\n                  ) : sales.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={8} className=\"text-center py-8 text-muted-foreground\">\n                        No sales found\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    sales.map((sale: any) => {\n                      const paymentDisplay = getPaymentMethodDisplay(sale.paymentMethod);\n                      return (\n                        <TableRow key={sale.id}>\n                          <TableCell className=\"font-mono text-sm\" data-testid={`sale-id-${sale.id}`}>\n                            #{sale.saleId}\n                          </TableCell>\n                          <TableCell className=\"text-sm\" data-testid={`sale-product-${sale.id}`}>\n                            {sale.productColor?.product?.brand} {sale.productColor?.product?.modelNumber}\n                          </TableCell>\n                          <TableCell className=\"text-sm\" data-testid={`sale-color-${sale.id}`}>\n                            {sale.productColor?.colorName}\n                          </TableCell>\n                          <TableCell className=\"text-sm\" data-testid={`sale-size-${sale.id}`}>\n                            {sale.size}\n                          </TableCell>\n                          <TableCell className=\"text-sm\" data-testid={`sale-quantity-${sale.id}`}>\n                            {sale.quantity}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={paymentDisplay.variant} data-testid={`sale-payment-${sale.id}`}>\n                              {paymentDisplay.label}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"text-sm font-medium\" data-testid={`sale-total-${sale.id}`}>\n                            AED {sale.totalAmount}\n                          </TableCell>\n                          <TableCell className=\"text-sm text-muted-foreground\" data-testid={`sale-time-${sale.id}`}>\n                            {formatDistanceToNow(new Date(sale.createdAt), { addSuffix: true })}\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })\n                  )}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7450},"client/src/components/inventory/product-details-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useStore } from \"@/hooks/use-store\";\nimport type { ProductWithColors } from \"@shared/schema\";\n\ninterface ProductDetailsModalProps {\n  product: ProductWithColors;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function ProductDetailsModal({\n  product,\n  open,\n  onOpenChange,\n}: ProductDetailsModalProps) {\n  const { currentStore } = useStore();\n\n  const getColorInventory = (color: any) => {\n    return color.inventory.filter((inv: any) => inv.store === currentStore);\n  };\n\n  const getTotalStock = (color: any) => {\n    return getColorInventory(color).reduce((total: number, inv: any) => total + inv.quantity, 0);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Product Details</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Product Image */}\n          <div>\n            {product.imageUrl ? (\n              <img\n                src={product.imageUrl}\n                alt={`${product.brand} ${product.modelNumber}`}\n                className=\"w-full h-96 object-cover rounded-lg\"\n                data-testid=\"product-detail-image\"\n              />\n            ) : (\n              <div className=\"w-full h-96 bg-muted rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-box text-4xl text-muted-foreground\"></i>\n              </div>\n            )}\n          </div>\n          \n          {/* Product Information */}\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-bold text-lg\" data-testid=\"product-detail-name\">\n                {product.brand} {product.modelNumber}\n              </h4>\n              <p className=\"text-muted-foreground\" data-testid=\"product-detail-codes\">\n                Model: {product.modelNumber}\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Brand</label>\n                <p className=\"text-muted-foreground\" data-testid=\"product-detail-brand\">{product.brand}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Type</label>\n                <p className=\"text-muted-foreground\" data-testid=\"product-detail-type\">{product.productType}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Store Price</label>\n                <p className=\"font-bold text-primary\" data-testid=\"product-detail-store-price\">AED {product.storePriceAED}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Online Price</label>\n                <p className=\"font-bold text-primary\" data-testid=\"product-detail-online-price\">AED {product.onlinePriceAED}</p>\n              </div>\n            </div>\n            \n            {/* Colors and Sizes */}\n            <div>\n              <h5 className=\"font-medium mb-3\">Available Colors & Sizes ({currentStore} store)</h5>\n              <div className=\"space-y-3\" data-testid=\"product-colors-list\">\n                {product.colors.map((color, index) => {\n                  const inventory = getColorInventory(color);\n                  const totalStock = getTotalStock(color);\n                  \n                  if (inventory.length === 0) return null;\n                  \n                  return (\n                    <Card key={index} className=\"border-border\">\n                      <CardContent className=\"p-3\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"font-medium\" data-testid={`color-name-${index}`}>{color.colorName}</span>\n                          <span className=\"text-sm text-muted-foreground\" data-testid={`color-total-${index}`}>\n                            {totalStock} items total\n                          </span>\n                        </div>\n                        <div className=\"flex flex-wrap gap-2\" data-testid={`color-sizes-${index}`}>\n                          {inventory.map((inv: any, invIndex: number) => (\n                            <Badge key={invIndex} variant=\"secondary\" data-testid={`size-badge-${index}-${invIndex}`}>\n                              {inv.size} ({inv.quantity})\n                            </Badge>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n                \n                {product.colors.every(color => getColorInventory(color).length === 0) && (\n                  <p className=\"text-muted-foreground text-center py-4\">\n                    No inventory available for {currentStore} store\n                  </p>\n                )}\n              </div>\n            </div>\n            \n            {/* Specifications */}\n            {product.specifications && (\n              <div>\n                <h5 className=\"font-medium mb-2\">Specifications</h5>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"product-detail-specifications\">\n                  {product.specifications}\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5630},"client/src/components/inventory/product-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useStore } from \"@/hooks/use-store\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertProductSchema } from \"@shared/schema\";\nimport { BRANDS, PRODUCT_TYPES, COLORS, SIZES } from \"@/lib/constants\";\nimport { z } from \"zod\";\n\nconst productFormSchema = insertProductSchema.extend({\n  colors: z.array(z.object({\n    colorName: z.string().min(1, \"Color name is required\"),\n    inventory: z.array(z.object({\n      size: z.string().min(1, \"Size is required\"),\n      quantity: z.number().min(0, \"Quantity must be positive\"),\n    })),\n  })).min(1, \"At least one color is required\"),\n});\n\ntype ProductFormData = z.infer<typeof productFormSchema>;\n\ninterface ProductFormProps {\n  product?: ProductWithColors;\n  onSuccess: () => void;\n}\n\nexport default function ProductForm({ product, onSuccess }: ProductFormProps) {\n  const { toast } = useToast();\n  const { currentStore } = useStore();\n  const [newColorName, setNewColorName] = useState(\"\");\n  const [newSize, setNewSize] = useState(\"\");\n  const [newQuantity, setNewQuantity] = useState(\"\");\n  const [selectedImage, setSelectedImage] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string>(\"\");\n\n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productFormSchema),\n    defaultValues: product ? {\n      modelNumber: product.modelNumber,\n      brand: product.brand,\n      productType: product.productType,\n      storePriceAED: product.storePriceAED,\n      onlinePriceAED: product.onlinePriceAED,\n      specifications: product.specifications || \"\",\n      imageUrl: product.imageUrl || \"\",\n      colors: product.colors || [],\n    } : {\n      modelNumber: \"\",\n      brand: \"\",\n      productType: \"\",\n      storePriceAED: \"\",\n      onlinePriceAED: \"\",\n      specifications: \"\",\n      imageUrl: \"\",\n      colors: [],\n    },\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (data: ProductFormData) => {\n      // Convert image to base64 if selected\n      let imageUrl = data.imageUrl;\n      if (selectedImage) {\n        const reader = new FileReader();\n        imageUrl = await new Promise<string>((resolve) => {\n          reader.onload = () => resolve(reader.result as string);\n          reader.readAsDataURL(selectedImage);\n        });\n      }\n      \n      let productData;\n      if (product) {\n        // Update existing product\n        const response = await apiRequest(\"PUT\", `/api/products/${product.id}`, {\n          modelNumber: data.modelNumber,\n          brand: data.brand,\n          productType: data.productType,\n          storePriceAED: data.storePriceAED,\n          onlinePriceAED: data.onlinePriceAED,\n          specifications: data.specifications,\n          imageUrl: imageUrl,\n        });\n        productData = await response.json();\n      } else {\n        // Create new product\n        const response = await apiRequest(\"POST\", \"/api/products\", {\n          modelNumber: data.modelNumber,\n          brand: data.brand,\n          productType: data.productType,\n          storePriceAED: data.storePriceAED,\n          onlinePriceAED: data.onlinePriceAED,\n          specifications: data.specifications,\n          imageUrl: imageUrl,\n        });\n        productData = await response.json();\n      }\n\n      // Create colors and inventory\n      for (const color of data.colors) {\n        const colorResponse = await apiRequest(\"POST\", `/api/products/${productData.id}/colors`, {\n          colorName: color.colorName,\n        });\n        const colorData = await colorResponse.json();\n\n        // Create inventory entries\n        for (const inv of color.inventory) {\n          await apiRequest(\"PUT\", \"/api/inventory\", {\n            productColorId: colorData.id,\n            store: currentStore,\n            size: inv.size,\n            quantity: parseInt(inv.quantity.toString()) || 0,\n          });\n        }\n      }\n\n      return productData;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: product ? \"Product updated successfully\" : \"Product created successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: product ? \"Failed to update product\" : \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProductFormData) => {\n    createProductMutation.mutate(data);\n  };\n\n  const addColor = () => {\n    if (!newColorName) return;\n    \n    const colors = form.getValues(\"colors\");\n    const existingColor = colors.find(c => c.colorName === newColorName);\n    \n    if (existingColor) {\n      toast({\n        title: \"Warning\",\n        description: \"Color already exists\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    form.setValue(\"colors\", [\n      ...colors,\n      { colorName: newColorName, inventory: [] },\n    ]);\n    setNewColorName(\"\");\n  };\n\n  const removeColor = (colorIndex: number) => {\n    const colors = form.getValues(\"colors\");\n    form.setValue(\"colors\", colors.filter((_, i) => i !== colorIndex));\n  };\n\n  const addInventoryToColor = (colorIndex: number) => {\n    const quantity = parseInt(newQuantity) || 0;\n    if (!newSize || quantity < 0) return;\n\n    const colors = form.getValues(\"colors\");\n    const color = colors[colorIndex];\n    \n    const existingSize = color.inventory.find(inv => inv.size === newSize);\n    if (existingSize) {\n      toast({\n        title: \"Warning\",\n        description: \"Size already exists for this color\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    color.inventory.push({ size: newSize, quantity: quantity });\n    form.setValue(\"colors\", colors);\n    setNewSize(\"\");\n    setNewQuantity(\"\");\n  };\n\n  const removeInventoryFromColor = (colorIndex: number, inventoryIndex: number) => {\n    const colors = form.getValues(\"colors\");\n    colors[colorIndex].inventory = colors[colorIndex].inventory.filter((_, i) => i !== inventoryIndex);\n    form.setValue(\"colors\", colors);\n  };\n\n  const watchedColors = form.watch(\"colors\");\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Product Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Product Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n\n              <FormField\n                control={form.control}\n                name=\"modelNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Model Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"RD001\" {...field} data-testid=\"input-model-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"brand\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Brand</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-brand\">\n                          <SelectValue placeholder=\"Select brand\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {BRANDS.map((brand) => (\n                          <SelectItem key={brand} value={brand}>{brand}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"productType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Product Type</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-product-type\">\n                          <SelectValue placeholder=\"Select type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {PRODUCT_TYPES.map((type) => (\n                          <SelectItem key={type} value={type}>{type}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"storePriceAED\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-right\">سعر البوتيك (درهم)</FormLabel>\n                    <FormControl>\n                      <Input type=\"text\" placeholder=\"299\" {...field} data-testid=\"input-store-price\" className=\"text-right\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"onlinePriceAED\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-right\">السعر الأونلاين (درهم)</FormLabel>\n                    <FormControl>\n                      <Input type=\"text\" placeholder=\"329\" {...field} data-testid=\"input-online-price\" className=\"text-right\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"specifications\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Specifications</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Product specifications...\"\n                      {...field}\n                      data-testid=\"textarea-specifications\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Image Upload */}\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2 text-right\">صورة المنتج</label>\n                <Input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) {\n                      setSelectedImage(file);\n                      const reader = new FileReader();\n                      reader.onload = (e) => {\n                        setImagePreview(e.target?.result as string);\n                        form.setValue('imageUrl', e.target?.result as string);\n                      };\n                      reader.readAsDataURL(file);\n                    }\n                  }}\n                  data-testid=\"input-image-file\"\n                />\n              </div>\n              {imagePreview && (\n                <div className=\"flex justify-center\">\n                  <img\n                    src={imagePreview}\n                    alt=\"معاينة الصورة\"\n                    className=\"max-w-xs max-h-48 object-cover rounded-lg border\"\n                  />\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Colors and Inventory */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Colors & Inventory</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Add New Color */}\n            <div className=\"flex gap-2\">\n              <Select value={newColorName} onValueChange={setNewColorName}>\n                <SelectTrigger className=\"flex-1\" data-testid=\"select-new-color\">\n                  <SelectValue placeholder=\"Select color to add\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {COLORS.filter(color => !watchedColors.some(c => c.colorName === color)).map((color) => (\n                    <SelectItem key={color} value={color}>{color}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Button type=\"button\" onClick={addColor} data-testid=\"button-add-color\">\n                Add Color\n              </Button>\n            </div>\n\n            {/* Display Colors */}\n            <div className=\"space-y-4\">\n              {watchedColors.map((color, colorIndex) => (\n                <Card key={colorIndex} className=\"border-muted\">\n                  <CardHeader className=\"pb-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">{color.colorName}</CardTitle>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeColor(colorIndex)}\n                        data-testid={`button-remove-color-${colorIndex}`}\n                      >\n                        <i className=\"fas fa-trash text-destructive\"></i>\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    {/* Add Inventory */}\n                    <div className=\"flex gap-2 mb-3\">\n                      <Select value={newSize} onValueChange={setNewSize}>\n                        <SelectTrigger className=\"flex-1\" data-testid={`select-size-${colorIndex}`}>\n                          <SelectValue placeholder=\"Select size\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {SIZES.filter(size => !color.inventory.some(inv => inv.size === size)).map((size) => (\n                            <SelectItem key={size} value={size}>{size}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <Input\n                        type=\"text\"\n                        placeholder=\"الكمية\"\n                        value={newQuantity}\n                        onChange={(e) => setNewQuantity(e.target.value)}\n                        className=\"w-24 text-right\"\n                        data-testid={`input-quantity-${colorIndex}`}\n                      />\n                      <Button\n                        type=\"button\"\n                        onClick={() => addInventoryToColor(colorIndex)}\n                        data-testid={`button-add-inventory-${colorIndex}`}\n                      >\n                        Add\n                      </Button>\n                    </div>\n\n                    {/* Display Inventory */}\n                    <div className=\"flex flex-wrap gap-2\">\n                      {color.inventory.map((inv, invIndex) => (\n                        <Badge key={invIndex} variant=\"secondary\" className=\"flex items-center gap-2\">\n                          Size {inv.size}: {inv.quantity} qty\n                          <button\n                            type=\"button\"\n                            onClick={() => removeInventoryFromColor(colorIndex, invIndex)}\n                            className=\"ml-1 text-destructive hover:text-destructive/80\"\n                            data-testid={`button-remove-inventory-${colorIndex}-${invIndex}`}\n                          >\n                            <i className=\"fas fa-times text-xs\"></i>\n                          </button>\n                        </Badge>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Submit Button */}\n        <div className=\"flex justify-end space-x-2\">\n          <Button type=\"button\" variant=\"outline\" onClick={onSuccess}>\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={createProductMutation.isPending}\n            data-testid=\"button-submit-product\"\n          >\n            {createProductMutation.isPending \n              ? (product ? \"Updating...\" : \"Creating...\") \n              : (product ? \"Update Product\" : \"Create Product\")\n            }\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":17512},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useStore } from \"@/hooks/use-store\";\nimport { useLocation } from \"wouter\";\n\nexport default function Header() {\n  const { currentEmployee, currentStore, logout } = useStore();\n  const [, setLocation] = useLocation();\n\n  const handleChangeEmployee = () => {\n    logout();\n    setLocation(\"/\");\n  };\n\n  const handleChangeStore = () => {\n    logout();\n    setLocation(\"/\");\n  };\n\n  const handleExportData = () => {\n    // TODO: Implement export functionality\n    console.log(\"Export data clicked\");\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4 sticky top-0 z-50\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h1 className=\"text-xl font-bold text-primary\">LaRosa</h1>\n          <div className=\"h-6 w-px bg-border\"></div>\n          <div className=\"text-sm text-muted-foreground\">\n            <span className=\"capitalize\" data-testid=\"text-current-employee\">{currentEmployee}</span> • \n            <span className=\"capitalize ml-1\" data-testid=\"text-current-store\">{currentStore}</span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleChangeEmployee}\n            data-testid=\"button-change-employee\"\n          >\n            <i className=\"fas fa-user-cog mr-2\"></i>\n            Change Employee\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleChangeStore}\n            data-testid=\"button-change-store\"\n          >\n            <i className=\"fas fa-store mr-2\"></i>\n            Change Store\n          </Button>\n          <Button\n            className=\"bg-primary text-primary-foreground hover:opacity-90\"\n            size=\"sm\"\n            onClick={handleExportData}\n            data-testid=\"button-export-data\"\n          >\n            <i className=\"fas fa-download mr-2\"></i>\n            Export Data\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2145},"client/src/components/layout/sidebar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { useStore } from \"@/hooks/use-store\";\n\nconst NAVIGATION_ITEMS = [\n  { id: \"dashboard\", path: \"/dashboard\", icon: \"fas fa-tachometer-alt\", label: \"Dashboard\" },\n  { id: \"inventory\", path: \"/inventory\", icon: \"fas fa-boxes\", label: \"Inventory Management\" },\n  { id: \"sales\", path: \"/sales\", icon: \"fas fa-cash-register\", label: \"Sales\" },\n  { id: \"orders\", path: \"/orders\", icon: \"fas fa-truck\", label: \"Orders\" },\n  { id: \"returns\", path: \"/returns\", icon: \"fas fa-undo\", label: \"Returns & Exchanges\" },\n  { id: \"reports\", path: \"/reports\", icon: \"fas fa-chart-bar\", label: \"Reports\" },\n];\n\nexport default function Sidebar() {\n  const [location, setLocation] = useLocation();\n  const { currentStore } = useStore();\n\n  const handleNavigation = (path: string) => {\n    setLocation(path);\n  };\n\n  // Filter orders section for boutique store\n  const visibleItems = NAVIGATION_ITEMS.filter(item => {\n    if (item.id === \"orders\" && currentStore === \"boutique\") {\n      return false;\n    }\n    return true;\n  });\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border min-h-screen\">\n      <nav className=\"p-4 space-y-2\">\n        {visibleItems.map((item) => {\n          const isActive = location === item.path;\n          return (\n            <Button\n              key={item.id}\n              variant=\"ghost\"\n              className={`w-full justify-start h-auto p-3 ${\n                isActive ? \"sidebar-active\" : \"\"\n              }`}\n              onClick={() => handleNavigation(item.path)}\n              data-testid={`nav-${item.id}`}\n            >\n              <i className={`${item.icon} mr-3`} />\n              {item.label}\n            </Button>\n          );\n        })}\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":1814},"client/src/components/orders/order-details-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ORDER_STATUSES } from \"@/lib/constants\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { OrderWithDetails } from \"@shared/schema\";\n\ninterface OrderDetailsModalProps {\n  order: OrderWithDetails;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function OrderDetailsModal({\n  order,\n  open,\n  onOpenChange,\n}: OrderDetailsModalProps) {\n  const getStatusDisplay = (status: string) => {\n    const statusConfig = ORDER_STATUSES.find(s => s.value === status);\n    if (!statusConfig) return { label: status, variant: \"outline\" as const };\n\n    const variantMap = {\n      yellow: \"secondary\" as const,\n      blue: \"default\" as const,\n      green: \"default\" as const,\n      red: \"destructive\" as const,\n    };\n\n    return {\n      label: statusConfig.label,\n      variant: variantMap[statusConfig.color as keyof typeof variantMap] || \"outline\" as const,\n    };\n  };\n\n  const statusDisplay = getStatusDisplay(order.status);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Order Details - #{order.orderId}</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Customer Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Customer Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Name</label>\n                <p className=\"font-medium\" data-testid=\"order-detail-customer-name\">{order.customerName}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Phone</label>\n                <p data-testid=\"order-detail-customer-phone\">{order.customerPhone}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Emirate</label>\n                <p data-testid=\"order-detail-customer-emirate\">{order.customerEmirate}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Address</label>\n                <p className=\"text-sm\" data-testid=\"order-detail-customer-address\">{order.customerAddress}</p>\n              </div>\n              {order.notes && (\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Notes</label>\n                  <p className=\"text-sm\" data-testid=\"order-detail-notes\">{order.notes}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Order Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Order Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Status</label>\n                <div>\n                  <Badge variant={statusDisplay.variant} data-testid=\"order-detail-status\">\n                    {statusDisplay.label}\n                  </Badge>\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Tracking Number</label>\n                <p className=\"font-mono\" data-testid=\"order-detail-tracking\">\n                  {order.trackingNumber || \"Not assigned\"}\n                </p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Payment Method</label>\n                <p data-testid=\"order-detail-payment\">\n                  {order.paymentMethod === \"cash_on_delivery\" ? \"Cash on Delivery\" : \"Bank Transfer\"}\n                </p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Order Date</label>\n                <p data-testid=\"order-detail-date\">\n                  {formatDistanceToNow(new Date(order.createdAt), { addSuffix: true })}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Product Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Product Details</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-16 h-16 rounded-lg bg-muted flex items-center justify-center\">\n                <i className=\"fas fa-box text-2xl text-muted-foreground\"></i>\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium\" data-testid=\"order-detail-product-name\">\n                  {order.productColor?.product?.brand} {order.productColor?.product?.modelNumber}\n                </h4>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"order-detail-product-code\">\n                  Code: {order.productColor?.product?.productCode}\n                </p>\n                <div className=\"flex items-center space-x-4 mt-2\">\n                  <span className=\"text-sm\">\n                    <strong>Color:</strong> <span data-testid=\"order-detail-product-color\">{order.productColor?.colorName}</span>\n                  </span>\n                  <span className=\"text-sm\">\n                    <strong>Size:</strong> <span data-testid=\"order-detail-product-size\">{order.size}</span>\n                  </span>\n                  <span className=\"text-sm\">\n                    <strong>Quantity:</strong> <span data-testid=\"order-detail-product-quantity\">{order.quantity}</span>\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-lg font-bold text-primary\" data-testid=\"order-detail-total\">\n                  AED {order.totalAmount}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  AED {order.unitPrice} each\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6499},"client/src/components/orders/order-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useStore } from \"@/hooks/use-store\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertOrderSchema } from \"@shared/schema\";\nimport { EMIRATES, PAYMENT_METHODS } from \"@/lib/constants\";\nimport { z } from \"zod\";\n\nconst orderFormSchema = insertOrderSchema.extend({\n  productId: z.number().min(1, \"Product is required\"),\n  colorId: z.number().min(1, \"Color is required\"),\n});\n\ntype OrderFormData = z.infer<typeof orderFormSchema>;\n\ninterface OrderFormProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport default function OrderForm({ onSuccess, onCancel }: OrderFormProps) {\n  const { toast } = useToast();\n  const { currentStore } = useStore();\n  const [selectedProduct, setSelectedProduct] = useState<any>(null);\n  const [selectedColor, setSelectedColor] = useState<any>(null);\n  const [availableSizes, setAvailableSizes] = useState<any[]>([]);\n\n  const form = useForm<OrderFormData>({\n    resolver: zodResolver(orderFormSchema),\n    defaultValues: {\n      orderId: `ORD${Date.now()}`,\n      employeeId: 1, // TODO: Get from actual employee selection\n      customerName: \"\",\n      customerPhone: \"\",\n      customerEmirate: \"\",\n      customerAddress: \"\",\n      trackingNumber: \"\",\n      notes: \"\",\n      productColorId: 0,\n      size: \"0\",\n      quantity: 1,\n      unitPrice: \"0\",\n      paymentMethod: \"cash_on_delivery\" as any,\n      totalAmount: \"0\",\n      status: \"pending\" as any,\n    },\n  });\n\n  const { data: products = [] } = useQuery({\n    queryKey: [`/api/online/products`],\n    enabled: currentStore === \"online\",\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/orders\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const calculateTotal = () => {\n    const quantity = form.watch(\"quantity\");\n    const unitPrice = parseFloat(form.watch(\"unitPrice\") || \"0\");\n    const total = quantity * unitPrice;\n    form.setValue(\"totalAmount\", total.toFixed(2));\n  };\n\n  useEffect(() => {\n    calculateTotal();\n  }, [form.watch(\"quantity\"), form.watch(\"unitPrice\")]);\n\n  const handleProductChange = (productId: string) => {\n    const product = products.find((p: any) => p.id === parseInt(productId));\n    setSelectedProduct(product);\n    setSelectedColor(null);\n    setAvailableSizes([]);\n    \n    if (product) {\n      form.setValue(\"unitPrice\", product.onlinePriceAED);\n    }\n  };\n\n  const handleColorChange = (colorId: string) => {\n    if (!selectedProduct) return;\n    \n    const color = selectedProduct.colors.find((c: any) => c.id === parseInt(colorId));\n    setSelectedColor(color);\n    \n    if (color) {\n      const inventory = color.inventory.filter((inv: any) => inv.store === \"online\" && inv.quantity > 0);\n      setAvailableSizes(inventory);\n      form.setValue(\"productColorId\", color.id);\n    }\n  };\n\n  const handleSizeChange = (size: string) => {\n    form.setValue(\"size\", size);\n  };\n\n  const onSubmit = (data: OrderFormData) => {\n    createOrderMutation.mutate(data);\n  };\n\n  if (currentStore !== \"online\") return null;\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Customer Information */}\n        <div className=\"border border-border rounded-lg p-4\">\n          <h4 className=\"font-medium mb-4\">Customer Information</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"customerName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Customer Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter customer name\" {...field} data-testid=\"input-customer-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"customerPhone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Phone Number</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"+971 50 123 4567\" {...field} data-testid=\"input-customer-phone\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"customerEmirate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Emirate</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-customer-emirate\">\n                        <SelectValue placeholder=\"Select emirate\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {EMIRATES.map((emirate) => (\n                        <SelectItem key={emirate} value={emirate}>{emirate}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"trackingNumber\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tracking Number (Optional)</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"TRK123456\" {...field} data-testid=\"input-tracking-number\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"customerAddress\"\n            render={({ field }) => (\n              <FormItem className=\"mt-4\">\n                <FormLabel>Address</FormLabel>\n                <FormControl>\n                  <Textarea\n                    placeholder=\"Full delivery address...\"\n                    {...field}\n                    data-testid=\"textarea-customer-address\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"notes\"\n            render={({ field }) => (\n              <FormItem className=\"mt-4\">\n                <FormLabel>Notes (Optional)</FormLabel>\n                <FormControl>\n                  <Textarea\n                    placeholder=\"Additional notes...\"\n                    {...field}\n                    data-testid=\"textarea-notes\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Product Selection */}\n        <div className=\"border border-border rounded-lg p-4\">\n          <h4 className=\"font-medium mb-4\">Product Information</h4>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Select Product</label>\n              <Select onValueChange={handleProductChange}>\n                <SelectTrigger data-testid=\"select-order-product\">\n                  <SelectValue placeholder=\"Choose a product...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {products.map((product: any) => (\n                    <SelectItem key={product.id} value={product.id.toString()}>\n                      {product.brand} {product.modelNumber} ({product.productCode})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Select Color</label>\n              <Select onValueChange={handleColorChange} disabled={!selectedProduct}>\n                <SelectTrigger data-testid=\"select-order-color\">\n                  <SelectValue placeholder={selectedProduct ? \"Choose a color...\" : \"Select product first...\"} />\n                </SelectTrigger>\n                <SelectContent>\n                  {selectedProduct?.colors?.map((color: any) => (\n                    <SelectItem key={color.id} value={color.id.toString()}>\n                      {color.colorName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Select Size</label>\n              <Select onValueChange={handleSizeChange} disabled={!selectedColor}>\n                <SelectTrigger data-testid=\"select-order-size\">\n                  <SelectValue placeholder={selectedColor ? \"Choose a size...\" : \"Select color first...\"} />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableSizes.map((inv: any) => (\n                    <SelectItem key={`${inv.size}`} value={inv.size.toString()}>\n                      {inv.size} (Available: {inv.quantity})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"quantity\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Quantity</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      {...field}\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                      data-testid=\"input-order-quantity\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n        </div>\n\n        {/* Payment Information */}\n        <div className=\"border border-border rounded-lg p-4\">\n          <h4 className=\"font-medium mb-4\">Payment Information</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"paymentMethod\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Payment Method</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-order-payment-method\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {PAYMENT_METHODS.online.map((method) => (\n                        <SelectItem key={method.value} value={method.value}>\n                          {method.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Total Amount</label>\n              <div className=\"text-2xl font-bold text-primary\" data-testid=\"order-total-amount\">\n                AED {form.watch(\"totalAmount\")}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex space-x-3\">\n          <Button\n            type=\"submit\"\n            disabled={createOrderMutation.isPending}\n            data-testid=\"button-create-order\"\n          >\n            <i className=\"fas fa-truck mr-2\"></i>\n            {createOrderMutation.isPending ? \"Creating...\" : \"Create Order\"}\n          </Button>\n          <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"button-cancel-order\">\n            <i className=\"fas fa-times mr-2\"></i>\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":12979},"client/src/components/returns/return-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useStore } from \"@/hooks/use-store\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertReturnSchema } from \"@shared/schema\";\nimport { RETURN_TYPES } from \"@/lib/constants\";\nimport { z } from \"zod\";\n\nconst returnFormSchema = insertReturnSchema.extend({\n  originalProductId: z.number().optional(),\n  originalColorId: z.number().optional(),\n  newProductId: z.number().optional(),\n  newColorId: z.number().optional(),\n});\n\ntype ReturnFormData = z.infer<typeof returnFormSchema>;\n\ninterface ReturnFormProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport default function ReturnForm({ onSuccess, onCancel }: ReturnFormProps) {\n  const { toast } = useToast();\n  const { currentStore } = useStore();\n  const [isExchange, setIsExchange] = useState(false);\n  const [originalProduct, setOriginalProduct] = useState<any>(null);\n  const [originalColor, setOriginalColor] = useState<any>(null);\n  const [newProduct, setNewProduct] = useState<any>(null);\n  const [newColor, setNewColor] = useState<any>(null);\n  const [originalSizes, setOriginalSizes] = useState<any[]>([]);\n  const [newSizes, setNewSizes] = useState<any[]>([]);\n\n  const form = useForm<ReturnFormData>({\n    resolver: zodResolver(returnFormSchema),\n    defaultValues: {\n      returnId: `RET${Date.now()}`,\n      employeeId: 1, // TODO: Get from actual employee selection\n      store: currentStore as any,\n      originalSaleId: \"\",\n      originalOrderId: \"\",\n      returnType: \"refund\" as any,\n      originalProductColorId: 0,\n      originalSize: \"0\",\n      originalQuantity: 1,\n      newProductColorId: undefined,\n      newSize: undefined,\n      newQuantity: undefined,\n      refundAmount: \"0\",\n      priceDifference: \"0\",\n      reason: \"\",\n    },\n  });\n\n  const { data: products = [] } = useQuery({\n    queryKey: [`/api/${currentStore}/products`],\n    enabled: !!currentStore,\n  });\n\n  const { data: sales = [] } = useQuery({\n    queryKey: [`/api/${currentStore}/sales`],\n    enabled: !!currentStore,\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: [\"/api/orders\"],\n    enabled: currentStore === \"online\",\n  });\n\n  const createReturnMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", `/api/${currentStore}/returns`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to process return\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleReturnTypeChange = (type: string) => {\n    form.setValue(\"returnType\", type as any);\n    setIsExchange(type.startsWith(\"exchange\"));\n    \n    if (type === \"refund\") {\n      form.setValue(\"newProductColorId\", undefined);\n      form.setValue(\"newSize\", undefined);\n      form.setValue(\"newQuantity\", undefined);\n      form.setValue(\"priceDifference\", \"0\");\n    }\n  };\n\n  const handleOriginalSaleChange = (saleId: string) => {\n    form.setValue(\"originalSaleId\", saleId);\n    form.setValue(\"originalOrderId\", \"\");\n    \n    // Find the sale and pre-populate product info\n    const sale = [...sales, ...orders].find((s: any) => s.saleId === saleId || s.orderId === saleId);\n    if (sale) {\n      const product = products.find((p: any) => \n        p.colors.some((c: any) => c.id === sale.productColorId)\n      );\n      if (product) {\n        setOriginalProduct(product);\n        const color = product.colors.find((c: any) => c.id === sale.productColorId);\n        setOriginalColor(color);\n        form.setValue(\"originalProductColorId\", sale.productColorId);\n        form.setValue(\"originalSize\", sale.size.toString());\n        form.setValue(\"originalQuantity\", sale.quantity);\n        \n        // Set refund amount for refund type\n        if (form.watch(\"returnType\") === \"refund\") {\n          form.setValue(\"refundAmount\", sale.totalAmount.toString());\n        }\n      }\n    }\n  };\n\n  const handleOriginalProductChange = (productId: string) => {\n    const product = products.find((p: any) => p.id === parseInt(productId));\n    setOriginalProduct(product);\n    setOriginalColor(null);\n    setOriginalSizes([]);\n  };\n\n  const handleOriginalColorChange = (colorId: string) => {\n    if (!originalProduct) return;\n    \n    const color = originalProduct.colors.find((c: any) => c.id === parseInt(colorId));\n    setOriginalColor(color);\n    \n    if (color) {\n      const inventory = color.inventory.filter((inv: any) => inv.store === currentStore);\n      setOriginalSizes(inventory);\n      form.setValue(\"originalProductColorId\", color.id);\n    }\n  };\n\n  const handleNewProductChange = (productId: string) => {\n    const product = products.find((p: any) => p.id === parseInt(productId));\n    setNewProduct(product);\n    setNewColor(null);\n    setNewSizes([]);\n  };\n\n  const handleNewColorChange = (colorId: string) => {\n    if (!newProduct) return;\n    \n    const color = newProduct.colors.find((c: any) => c.id === parseInt(colorId));\n    setNewColor(color);\n    \n    if (color) {\n      const inventory = color.inventory.filter((inv: any) => inv.store === currentStore);\n      setNewSizes(inventory);\n      form.setValue(\"newProductColorId\", color.id);\n      \n      // Calculate price difference\n      if (originalProduct && newProduct) {\n        const originalPrice = parseFloat(currentStore === \"boutique\" ? originalProduct.storePriceAED : originalProduct.onlinePriceAED);\n        const newPrice = parseFloat(currentStore === \"boutique\" ? newProduct.storePriceAED : newProduct.onlinePriceAED);\n        const difference = newPrice - originalPrice;\n        form.setValue(\"priceDifference\", difference.toFixed(2));\n      }\n    }\n  };\n\n  const onSubmit = (data: ReturnFormData) => {\n    createReturnMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Return Type and Original Sale */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"returnType\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Return Type</FormLabel>\n                <Select onValueChange={handleReturnTypeChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-return-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {RETURN_TYPES.map((type) => (\n                      <SelectItem key={type.value} value={type.value}>\n                        {type.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Original Sale/Order ID</label>\n            <Select onValueChange={handleOriginalSaleChange}>\n              <SelectTrigger data-testid=\"select-original-sale\">\n                <SelectValue placeholder=\"Select from recent sales/orders...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {sales.map((sale: any) => (\n                  <SelectItem key={sale.saleId} value={sale.saleId}>\n                    Sale #{sale.saleId} - {sale.productColor?.product?.brand} {sale.productColor?.product?.modelNumber}\n                  </SelectItem>\n                ))}\n                {currentStore === \"online\" && orders.map((order: any) => (\n                  <SelectItem key={order.orderId} value={order.orderId}>\n                    Order #{order.orderId} - {order.productColor?.product?.brand} {order.productColor?.product?.modelNumber}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Original Product Information */}\n        <Card className=\"border-muted\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-lg\">Original Product Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Product</label>\n                <Select onValueChange={handleOriginalProductChange} value={originalProduct?.id?.toString() || \"\"}>\n                  <SelectTrigger data-testid=\"select-original-product\">\n                    <SelectValue placeholder=\"Select product...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {products.map((product: any) => (\n                      <SelectItem key={product.id} value={product.id.toString()}>\n                        {product.brand} {product.modelNumber}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Color</label>\n                <Select onValueChange={handleOriginalColorChange} value={originalColor?.id?.toString() || \"\"}>\n                  <SelectTrigger data-testid=\"select-original-color\">\n                    <SelectValue placeholder=\"Select color...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {originalProduct?.colors?.map((color: any) => (\n                      <SelectItem key={color.id} value={color.id.toString()}>\n                        {color.colorName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"originalSize\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Size</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-original-size\">\n                          <SelectValue placeholder=\"Size...\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {originalSizes.map((inv: any) => (\n                          <SelectItem key={inv.size} value={inv.size.toString()}>\n                            {inv.size}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"originalQuantity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Quantity</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                        data-testid=\"input-original-quantity\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Exchange Product Information */}\n        {isExchange && (\n          <Card className=\"border-accent/20 bg-accent/5\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-lg\">New Product Information (Exchange)</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">New Product</label>\n                  <Select onValueChange={handleNewProductChange}>\n                    <SelectTrigger data-testid=\"select-new-product\">\n                      <SelectValue placeholder=\"Choose new product...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {products.map((product: any) => (\n                        <SelectItem key={product.id} value={product.id.toString()}>\n                          {product.brand} {product.modelNumber}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">New Color</label>\n                  <Select onValueChange={handleNewColorChange} disabled={!newProduct}>\n                    <SelectTrigger data-testid=\"select-new-color\">\n                      <SelectValue placeholder=\"Select color...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {newProduct?.colors?.map((color: any) => (\n                        <SelectItem key={color.id} value={color.id.toString()}>\n                          {color.colorName}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"newSize\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>New Size</FormLabel>\n                      <Select onValueChange={field.onChange} disabled={!newColor}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-new-size\">\n                            <SelectValue placeholder=\"Size...\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {newSizes.map((inv: any) => (\n                            <SelectItem key={inv.size} value={inv.size.toString()}>\n                              {inv.size} (Available: {inv.quantity})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Price Difference</label>\n                  <div className=\"text-lg font-medium text-accent\" data-testid=\"price-difference\">\n                    {form.watch(\"priceDifference\") && parseFloat(form.watch(\"priceDifference\") || \"0\") !== 0 ? (\n                      `${parseFloat(form.watch(\"priceDifference\") || \"0\") > 0 ? \"+\" : \"\"}AED ${form.watch(\"priceDifference\")}`\n                    ) : (\n                      \"AED 0\"\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"newQuantity\"\n                render={({ field }) => (\n                  <FormItem className=\"mt-4\">\n                    <FormLabel>New Quantity</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        value={field.value || 1}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                        data-testid=\"input-new-quantity\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Reason */}\n        <FormField\n          control={form.control}\n          name=\"reason\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Reason (Optional)</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Reason for return/exchange...\"\n                  {...field}\n                  data-testid=\"textarea-return-reason\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex space-x-3\">\n          <Button\n            type=\"submit\"\n            disabled={createReturnMutation.isPending}\n            data-testid=\"button-process-return\"\n          >\n            <i className=\"fas fa-check mr-2\"></i>\n            {createReturnMutation.isPending ? \"Processing...\" : \"Process Return/Exchange\"}\n          </Button>\n          <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"button-cancel-return\">\n            <i className=\"fas fa-times mr-2\"></i>\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":17753},"client/src/components/sales/sales-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useStore } from \"@/hooks/use-store\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertSaleSchema } from \"@shared/schema\";\nimport { PAYMENT_METHODS } from \"@/lib/constants\";\nimport { z } from \"zod\";\n\nconst salesFormSchema = insertSaleSchema.extend({\n  productId: z.number().min(1, \"Product is required\"),\n  colorId: z.number().min(1, \"Color is required\"),\n});\n\ntype SalesFormData = z.infer<typeof salesFormSchema>;\n\ninterface SalesFormProps {\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport default function SalesForm({ onSuccess, onCancel }: SalesFormProps) {\n  const { toast } = useToast();\n  const { currentStore } = useStore();\n  const [selectedProduct, setSelectedProduct] = useState<any>(null);\n  const [selectedColor, setSelectedColor] = useState<any>(null);\n  const [availableSizes, setAvailableSizes] = useState<any[]>([]);\n\n  const form = useForm<SalesFormData>({\n    resolver: zodResolver(salesFormSchema),\n    defaultValues: {\n      saleId: `S${Date.now()}`,\n      employeeId: 1, // TODO: Get from actual employee selection\n      store: currentStore as any,\n      productColorId: 0,\n      size: \"0\",\n      quantity: 1,\n      unitPrice: \"0\",\n      paymentMethod: \"cash\" as any,\n      taxAmount: \"0\",\n      totalAmount: \"0\",\n    },\n  });\n\n  const { data: products = [] } = useQuery({\n    queryKey: [`/api/${currentStore}/products`],\n    enabled: !!currentStore,\n  });\n\n  const createSaleMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", `/api/${currentStore}/sales`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create sale\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const calculateTotal = () => {\n    const quantity = form.watch(\"quantity\");\n    const unitPrice = parseFloat(form.watch(\"unitPrice\") || \"0\");\n    const paymentMethod = form.watch(\"paymentMethod\");\n    \n    const subtotal = quantity * unitPrice;\n    const taxRate = paymentMethod === \"card\" ? 0.05 : 0;\n    const taxAmount = subtotal * taxRate;\n    const total = subtotal + taxAmount;\n\n    form.setValue(\"taxAmount\", taxAmount.toFixed(2));\n    form.setValue(\"totalAmount\", total.toFixed(2));\n  };\n\n  useEffect(() => {\n    calculateTotal();\n  }, [form.watch(\"quantity\"), form.watch(\"unitPrice\"), form.watch(\"paymentMethod\")]);\n\n  const handleProductChange = (productId: string) => {\n    const product = products.find((p: any) => p.id === parseInt(productId));\n    setSelectedProduct(product);\n    setSelectedColor(null);\n    setAvailableSizes([]);\n    \n    if (product) {\n      const price = currentStore === \"boutique\" ? product.storePriceAED : product.onlinePriceAED;\n      form.setValue(\"unitPrice\", price);\n    }\n  };\n\n  const handleColorChange = (colorId: string) => {\n    if (!selectedProduct) return;\n    \n    const color = selectedProduct.colors.find((c: any) => c.id === parseInt(colorId));\n    setSelectedColor(color);\n    \n    if (color) {\n      const inventory = color.inventory.filter((inv: any) => inv.store === currentStore && inv.quantity > 0);\n      setAvailableSizes(inventory);\n      form.setValue(\"productColorId\", color.id);\n    }\n  };\n\n  const handleSizeChange = (size: string) => {\n    form.setValue(\"size\", size);\n  };\n\n  const onSubmit = (data: SalesFormData) => {\n    createSaleMutation.mutate(data);\n  };\n\n  const paymentMethods = PAYMENT_METHODS[currentStore as keyof typeof PAYMENT_METHODS] || [];\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Product Selection */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Select Product</label>\n            <Select onValueChange={handleProductChange}>\n              <SelectTrigger data-testid=\"select-product\">\n                <SelectValue placeholder=\"Choose a product...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {products.map((product: any) => (\n                  <SelectItem key={product.id} value={product.id.toString()}>\n                    {product.brand} {product.modelNumber} ({product.productCode})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Select Color</label>\n            <Select onValueChange={handleColorChange} disabled={!selectedProduct}>\n              <SelectTrigger data-testid=\"select-color\">\n                <SelectValue placeholder={selectedProduct ? \"Choose a color...\" : \"Select product first...\"} />\n              </SelectTrigger>\n              <SelectContent>\n                {selectedProduct?.colors?.map((color: any) => (\n                  <SelectItem key={color.id} value={color.id.toString()}>\n                    {color.colorName}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Select Size</label>\n            <Select onValueChange={handleSizeChange} disabled={!selectedColor}>\n              <SelectTrigger data-testid=\"select-size\">\n                <SelectValue placeholder={selectedColor ? \"Choose a size...\" : \"Select color first...\"} />\n              </SelectTrigger>\n              <SelectContent>\n                {availableSizes.map((inv: any) => (\n                  <SelectItem key={`${inv.size}`} value={inv.size.toString()}>\n                    {inv.size} (Available: {inv.quantity})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"quantity\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Quantity</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    {...field}\n                    onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                    data-testid=\"input-quantity\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Payment Information */}\n        <div className=\"border-t border-border pt-6\">\n          <h4 className=\"font-medium mb-4\">Payment Information</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"paymentMethod\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Payment Method</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-payment-method\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {paymentMethods.map((method) => (\n                        <SelectItem key={method.value} value={method.value}>\n                          {method.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Total Amount</label>\n              <div className=\"text-2xl font-bold text-primary\" data-testid=\"total-amount\">\n                AED {form.watch(\"totalAmount\")}\n              </div>\n              {form.watch(\"taxAmount\") !== \"0\" && (\n                <div className=\"text-sm text-muted-foreground\">\n                  (Includes AED {form.watch(\"taxAmount\")} tax)\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex space-x-3\">\n          <Button\n            type=\"submit\"\n            disabled={createSaleMutation.isPending}\n            data-testid=\"button-complete-sale\"\n          >\n            <i className=\"fas fa-shopping-cart mr-2\"></i>\n            {createSaleMutation.isPending ? \"Processing...\" : \"Complete Sale\"}\n          </Button>\n          <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"button-cancel-sale\">\n            <i className=\"fas fa-times mr-2\"></i>\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":9359},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/utils/export.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\n\nexport async function generateExport(\n  store: string,\n  dateRange: string,\n  format: string\n): Promise<boolean> {\n  try {\n    const response = await apiRequest(\"GET\", `/api/${store}/export`);\n    const data = await response.json();\n    \n    const timestamp = new Date().toISOString().split('T')[0];\n    const folderName = `LaRosa_Export_${store}_${timestamp}`;\n    \n    // Create CSV content for each data type\n    const csvFiles = {\n      [`product_catalog_${store}.csv`]: generateProductCatalogCSV(data.products),\n      [`sizes_colors_${store}.csv`]: generateSizesColorsCSV(data.products),\n      [`inventory_report_${store}.csv`]: generateInventoryCSV(data.inventory),\n      [`sales_report_${store}.csv`]: generateSalesCSV(data.sales),\n      [`returns_report_${store}.csv`]: generateReturnsCSV(data.returns),\n    };\n\n    // Add orders CSV for online store\n    if (store === \"online\" && data.orders) {\n      csvFiles[`orders_report_${store}.csv`] = generateOrdersCSV(data.orders);\n    }\n\n    // Generate README\n    const readme = generateReadme(store, data);\n    \n    // Create and download zip file (simplified for demo)\n    // In a real implementation, you'd use a library like JSZip\n    for (const [filename, content] of Object.entries(csvFiles)) {\n      downloadFile(content, filename, \"text/csv\");\n    }\n    \n    downloadFile(readme, `readme_${store}.txt`, \"text/plain\");\n    \n    return true;\n  } catch (error) {\n    console.error(\"Export failed:\", error);\n    return false;\n  }\n}\n\nfunction generateProductCatalogCSV(products: any[]): string {\n  const headers = [\n    \"Product Code\",\n    \"Model Number\", \n    \"Brand\",\n    \"Product Type\",\n    \"Store Price AED\",\n    \"Online Price AED\",\n    \"Specifications\",\n    \"Image URL\"\n  ];\n  \n  const rows = products.map(product => [\n    product.productCode,\n    product.modelNumber,\n    product.brand,\n    product.productType,\n    product.storePriceAED,\n    product.onlinePriceAED,\n    `\"${product.specifications || \"\"}\"`,\n    product.imageUrl || \"\"\n  ]);\n  \n  return [headers.join(\",\"), ...rows.map(row => row.join(\",\"))].join(\"\\n\");\n}\n\nfunction generateSizesColorsCSV(products: any[]): string {\n  const headers = [\n    \"Product Code\",\n    \"Color Name\",\n    \"Size\",\n    \"Store\",\n    \"Quantity\"\n  ];\n  \n  const rows: string[][] = [];\n  \n  products.forEach(product => {\n    product.colors?.forEach((color: any) => {\n      color.inventory?.forEach((inv: any) => {\n        rows.push([\n          product.productCode,\n          color.colorName,\n          inv.size.toString(),\n          inv.store,\n          inv.quantity.toString()\n        ]);\n      });\n    });\n  });\n  \n  return [headers.join(\",\"), ...rows.map(row => row.join(\",\"))].join(\"\\n\");\n}\n\nfunction generateInventoryCSV(inventory: any[]): string {\n  const headers = [\n    \"Product Color ID\",\n    \"Store\",\n    \"Size\", \n    \"Quantity\",\n    \"Last Updated\"\n  ];\n  \n  const rows = inventory.map(inv => [\n    inv.productColorId.toString(),\n    inv.store,\n    inv.size.toString(),\n    inv.quantity.toString(),\n    inv.updatedAt || inv.createdAt\n  ]);\n  \n  return [headers.join(\",\"), ...rows.map(row => row.join(\",\"))].join(\"\\n\");\n}\n\nfunction generateSalesCSV(sales: any[]): string {\n  const headers = [\n    \"Sale ID\",\n    \"Employee ID\",\n    \"Store\",\n    \"Product\",\n    \"Color\",\n    \"Size\",\n    \"Quantity\",\n    \"Unit Price\",\n    \"Payment Method\",\n    \"Tax Amount\",\n    \"Total Amount\",\n    \"Date\"\n  ];\n  \n  const rows = sales.map(sale => [\n    sale.saleId,\n    sale.employeeId?.toString() || \"\",\n    sale.store,\n    `\"${sale.productColor?.product?.brand || \"\"} ${sale.productColor?.product?.modelNumber || \"\"}\"`,\n    sale.productColor?.colorName || \"\",\n    sale.size.toString(),\n    sale.quantity.toString(),\n    sale.unitPrice,\n    sale.paymentMethod,\n    sale.taxAmount,\n    sale.totalAmount,\n    sale.createdAt\n  ]);\n  \n  return [headers.join(\",\"), ...rows.map(row => row.join(\",\"))].join(\"\\n\");\n}\n\nfunction generateOrdersCSV(orders: any[]): string {\n  const headers = [\n    \"Order ID\",\n    \"Customer Name\",\n    \"Customer Phone\",\n    \"Customer Emirate\",\n    \"Customer Address\",\n    \"Product\",\n    \"Color\",\n    \"Size\",\n    \"Quantity\",\n    \"Payment Method\",\n    \"Status\",\n    \"Tracking Number\",\n    \"Total Amount\",\n    \"Date\"\n  ];\n  \n  const rows = orders.map(order => [\n    order.orderId,\n    `\"${order.customerName}\"`,\n    order.customerPhone,\n    order.customerEmirate,\n    `\"${order.customerAddress}\"`,\n    `\"${order.productColor?.product?.brand || \"\"} ${order.productColor?.product?.modelNumber || \"\"}\"`,\n    order.productColor?.colorName || \"\",\n    order.size.toString(),\n    order.quantity.toString(),\n    order.paymentMethod,\n    order.status,\n    order.trackingNumber || \"\",\n    order.totalAmount,\n    order.createdAt\n  ]);\n  \n  return [headers.join(\",\"), ...rows.map(row => row.join(\",\"))].join(\"\\n\");\n}\n\nfunction generateReturnsCSV(returns: any[]): string {\n  const headers = [\n    \"Return ID\",\n    \"Original Sale ID\",\n    \"Original Order ID\",\n    \"Return Type\",\n    \"Original Product\",\n    \"Original Color\",\n    \"Original Size\",\n    \"Original Quantity\",\n    \"New Product\",\n    \"New Color\", \n    \"New Size\",\n    \"New Quantity\",\n    \"Refund Amount\",\n    \"Price Difference\",\n    \"Reason\",\n    \"Date\"\n  ];\n  \n  const rows = returns.map(returnItem => [\n    returnItem.returnId,\n    returnItem.originalSaleId || \"\",\n    returnItem.originalOrderId || \"\",\n    returnItem.returnType,\n    `\"${returnItem.originalProductColor?.product?.brand || \"\"} ${returnItem.originalProductColor?.product?.modelNumber || \"\"}\"`,\n    returnItem.originalProductColor?.colorName || \"\",\n    returnItem.originalSize.toString(),\n    returnItem.originalQuantity.toString(),\n    `\"${returnItem.newProductColor?.product?.brand || \"\"} ${returnItem.newProductColor?.product?.modelNumber || \"\"}\"`,\n    returnItem.newProductColor?.colorName || \"\",\n    returnItem.newSize?.toString() || \"\",\n    returnItem.newQuantity?.toString() || \"\",\n    returnItem.refundAmount || \"\",\n    returnItem.priceDifference || \"\",\n    `\"${returnItem.reason || \"\"}\"`,\n    returnItem.createdAt\n  ]);\n  \n  return [headers.join(\",\"), ...rows.map(row => row.join(\",\"))].join(\"\\n\");\n}\n\nfunction generateReadme(store: string, data: any): string {\n  return `LaRosa Fashion Store Export - ${store.toUpperCase()} Store\nGenerated on: ${new Date().toISOString()}\n\nThis export contains the following files:\n\n1. product_catalog_${store}.csv - Complete product catalog with pricing and specifications\n2. sizes_colors_${store}.csv - Product colors and size availability\n3. inventory_report_${store}.csv - Current inventory levels by size and color\n4. sales_report_${store}.csv - Sales transactions history\n5. returns_report_${store}.csv - Returns and exchanges history\n${store === \"online\" ? `6. orders_report_${store}.csv - Online orders with customer information\\n` : \"\"}\n\nSummary:\n- Total Products: ${data.products?.length || 0}\n- Total Sales: ${data.sales?.length || 0}\n- Total Returns: ${data.returns?.length || 0}\n${store === \"online\" ? `- Total Orders: ${data.orders?.length || 0}\\n` : \"\"}\nExport Date: ${data.exportDate}\nStore: ${store}\n\nAll sizes are exported as numeric values as specified.\nData is filtered for ${store} store only.\n\nFor manufacturing integration, please refer to the CSV files which contain\nall necessary product specifications, color combinations, and size data.\n`;\n}\n\nfunction downloadFile(content: string, filename: string, mimeType: string): void {\n  const blob = new Blob([content], { type: mimeType });\n  const url = window.URL.createObjectURL(blob);\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  window.URL.revokeObjectURL(url);\n}\n","size_bytes":7777}},"version":1}